import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,e as s,b as e,d as a}from"./app-Hrbkdq7n.js";const i="/assets/Pasted_image_20250108213716-BnZboZnW.png",u="/assets/Pasted_image_20250111115236-BfCwyb2O.png",r={},d=a(`<h1 id="lab5-xv6-lazy-page-allocation" tabindex="-1"><a class="header-anchor" href="#lab5-xv6-lazy-page-allocation"><span>Lab5:xv6 lazy page allocation</span></a></h1><p>操作系统可以通过页表硬件实现的众多巧妙技巧之一是对用户空间堆内存的延迟分配（lazy allocation）。Xv6应用程序通过<code>sbrk()</code>系统调用向内核请求堆内存。在我们提供的内核中，<code>sbrk()</code>会分配物理内存并将其映射到进程的虚拟地址空间。对于大型请求，内核分配和映射内存可能需要很长时间。例如，1GB的内存由262,144个4096字节的页面组成；即使每个分配操作都很廉价，但如此大量的分配操作仍然非常耗时。此外，一些程序分配的内存比实际使用的要多（例如，用于实现稀疏数组），或者提前分配内存但并未立即使用。为了在这些情况下让<code>sbrk()</code>更快地完成，复杂的内核会采用延迟分配用户内存的方式。也就是说，<code>sbrk()</code>不会立即分配物理内存，而是只记住哪些用户地址被分配，并在用户页表中将这些地址标记为无效。当进程首次尝试使用任何延迟分配的内存页面时，CPU会生成一个页错误（page fault），内核通过分配物理内存、将其清零并映射来处理这个错误。在这个实验中，你将向xv6添加这种延迟分配功能。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在开始编写代码之前，请阅读xv6书籍的第4章（特别是4.6节），以及你可能需要修改的相关文件： kernel/trap.c kernel/vm.c kernel/sysproc.c</p></div><p>要开始实验，首先切换到 <code>lazy</code> 分支。按照以下步骤操作：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch
$ <span class="token function">git</span> checkout lazy
$ <span class="token function">make</span> clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),k={id:"eliminate-allocation-from-sbrk-easy",tabindex:"-1"},v={class:"header-anchor",href:"#eliminate-allocation-from-sbrk-easy"},m={href:"https://pdos.csail.mit.edu/6.S081/2020/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="hint-container important"><p class="hint-container-title">重要</p><p>你的第一个任务是删除 <code>sbrk(n)</code> 系统调用实现中的内存分配代码。<code>sbrk(n)</code> 系统调用会将进程的内存大小增加 <code>n</code> 字节，并返回新分配区域的起始地址（即旧的大小）。修改后的 <code>sbrk(n)</code> 应该只增加进程的大小（<code>myproc()-&gt;sz</code>），并返回旧的大小，而不实际分配内存。因此，你需要删除对 <code>growproc()</code> 的调用（但仍然需要增加进程的大小！）。</p></div><p>尝试猜测修改的结果：什么会出问题？</p><p>进行此修改后，启动 xv6，并在 shell 中输入 <code>echo hi</code>。你应该会看到类似以下的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>init: starting <span class="token function">sh</span>
$ <span class="token builtin class-name">echo</span> hi
usertrap<span class="token punctuation">(</span><span class="token punctuation">)</span>: unexpected scause 0x000000000000000f <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">3</span>
            <span class="token assign-left variable">sepc</span><span class="token operator">=</span>0x0000000000001258 <span class="token assign-left variable">stval</span><span class="token operator">=</span>0x0000000000004008
<span class="token assign-left variable">va</span><span class="token operator">=</span>0x0000000000004000 <span class="token assign-left variable">pte</span><span class="token operator">=</span>0x0000000000000000
panic: uvmunmap: not mapped
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“<code>usertrap(): ...</code>” 消息来自 <code>trap.c</code> 中的用户陷阱处理程序；它捕获到了一个不知道如何处理的异常。请确保你理解为什么会出现此页错误。“<code>stval=0x0..04008</code>” 表示导致页错误的虚拟地址是 <code>0x4008</code>。</p><h3 id="实验步骤" tabindex="-1"><a class="header-anchor" href="#实验步骤"><span>实验步骤</span></a></h3><p>修改<code>kernel/sysproc.c</code>中的<code>sys_sbrk(void)</code>方法</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>uint64
<span class="token function">sys_sbrk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> addr<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  addr <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sz<span class="token punctuation">;</span>
  <span class="token comment">//仅增加页面大小，但是不实际分配内存。</span>
  <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sz <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sz <span class="token operator">+</span> n<span class="token punctuation">;</span>
  <span class="token comment">// if(growproc(n) &lt; 0)</span>
  <span class="token comment">//   return -1;</span>
  <span class="token keyword">return</span> addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="image-20240509111735902" tabindex="0" loading="lazy"><figcaption>image-20240509111735902</figcaption></figure>',9),g={id:"lazy-allocation-moderate",tabindex:"-1"},y={class:"header-anchor",href:"#lazy-allocation-moderate"},f={href:"https://pdos.csail.mit.edu/6.S081/2020/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},h=a(`<div class="hint-container important"><p class="hint-container-title">重要</p><p>修改<code>trap.c</code>中的代码，以应对来自用户空间因为将页面与一个错误的物理内存地址进行映射所引起的page fault。之后返回用户空间让进程继续执行。你应该将你的代码添加在 printf 调用产生  &quot;usertrap(): ...&quot; 信息之前。为保证<code>echo hi</code>命令能够工作，请修改你所需要的任何xv6内核中的代码。</p></div><p>一些提示：</p><ul><li>你可以通过检查 <code>r_scause()</code> 是否为 13 或 15 来判断一个故障是否是page fault，这通常发生在 <code>usertrap()</code> 中。</li><li><code>r_stval()</code> 返回 RISC-V的<code>stval</code>寄存器，这个寄存器包含引起page fault 的虚拟地址。</li><li>参考<code>vm.c</code>中<code>uvmalloc()</code>的代码，这部分代码在<code>sbrk()</code>中被称为 (via growproc())。你将会调用<code>kalloc()</code>和<code>mappages()</code>。</li><li><code>uvmunmap()</code>会发生panic。修改它使其当发生一些页面没有被映射时不发生panic。</li><li>如果你的内核崩溃了，请查看<code>kernel/kernel.asm</code>中的sepc</li><li>使用你在pgtbl 实验中实现的<code>vmprint</code>方法，来打印页表内容。</li><li>如果你看到 &quot;incomplete type proc&quot; 错误，先包含 &quot;spinlock.h&quot;，然后再包含 &quot;proc.h&quot;。 如果一切顺利，你的lazy allocation 代码应该能让 <code>echo hi</code> 正常工作。你应该至少会遇到一次页面错误（因此触发lazy allocation），可能还会遇到两次。</li></ul><h3 id="实验代码" tabindex="-1"><a class="header-anchor" href="#实验代码"><span>实验代码</span></a></h3><p>在<code>kernel/proc.c 中增加代码</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// to check if the va is in the lazy allocate range</span>
<span class="token keyword">int</span> <span class="token function">is_lazy_alloc_va</span><span class="token punctuation">(</span>uint64 va<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// if va larger than the sz, it&#39;s means a invalid va</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>va <span class="token operator">&gt;=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// to lazy allocate memory for the va</span>
<span class="token keyword">int</span> <span class="token function">lazy_alloc</span><span class="token punctuation">(</span>uint64 va<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// to get the page aligned va</span>
  va <span class="token operator">=</span> <span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// to allocate memory for the va</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>mem <span class="token operator">=</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// if the memory is not enough, return -1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//to initialize the memory</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// to map the memory to the va</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> va<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>mem<span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_W <span class="token operator">|</span> PTE_X <span class="token operator">|</span> PTE_U<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">kfree</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改文件<code>kernel/trap.c</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>which_dev <span class="token operator">=</span> <span class="token function">devintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ok</span>
  <span class="token comment">//增加代码</span>
  <span class="token comment">//====================start============================ </span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span> <span class="token operator">||</span> <span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// load or store page fault</span>
    uint64 va <span class="token operator">=</span> <span class="token function">r_stval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// check if the va in the lazy allocate range</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_lazy_alloc_va</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">lazy_alloc</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;lazy_alloc failed !\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;lazy alloc unexpected scause %p pid=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;            sepc=%p stval=%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">r_sepc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r_stval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      p<span class="token operator">-&gt;</span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//====================end============================ </span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>kernel/vm.c</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span>
<span class="token function">uvmunmap</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">,</span> uint64 va<span class="token punctuation">,</span> uint64 npages<span class="token punctuation">,</span> <span class="token keyword">int</span> do_free<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 uint64 a<span class="token punctuation">;</span>
 <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte<span class="token punctuation">;</span>

 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>va <span class="token operator">%</span> PGSIZE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
   <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;uvmunmap: not aligned&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">for</span><span class="token punctuation">(</span>a <span class="token operator">=</span> va<span class="token punctuation">;</span> a <span class="token operator">&lt;</span> va <span class="token operator">+</span> npages<span class="token operator">*</span>PGSIZE<span class="token punctuation">;</span> a <span class="token operator">+=</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">continue</span><span class="token punctuation">;</span>
     <span class="token comment">// panic(&quot;uvmunmap: walk&quot;);</span>
   <span class="token punctuation">}</span>
     
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">continue</span><span class="token punctuation">;</span>
     <span class="token comment">//panic(&quot;uvmunmap: not mapped&quot;);</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">PTE_FLAGS</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span> <span class="token operator">==</span> PTE_V<span class="token punctuation">)</span>
     <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;uvmunmap: not a leaf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>do_free<span class="token punctuation">)</span><span class="token punctuation">{</span>
     uint64 pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),_={id:"lazytests-and-usertests-moderate",tabindex:"-1"},w={class:"header-anchor",href:"#lazytests-and-usertests-moderate"},z={href:"https://pdos.csail.mit.edu/6.S081/2020/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},x=a(`<p>我们已经提供了 <code>lazytests</code>，这是一个 x86 的 xv6 用户程序，用于测试可能会对你的懒惰内存分配器造成压力的特定情况。请修改你的内核代码，确保 <code>lazytests</code> 和 <code>usertests</code> 都能通过。</p><p>需要处理的事项包括：</p><ol><li>处理负的 <code>sbrk()</code> 参数。</li><li>如果进程在虚拟内存地址上发生页面错误，而该地址高于通过 <code>sbrk()</code> 分配的任何地址，则终止该进程。</li><li>正确处理 <code>fork()</code> 中的父子进程内存拷贝。</li><li>处理进程将有效地址（通过 <code>sbrk()</code> 分配）传递给系统调用（如 <code>read</code> 或 <code>write</code>）的情况，但该地址的内存尚未分配。</li><li>正确处理内存不足的情况：如果在页面错误处理程序中 <code>kalloc()</code> 失败，则终止当前进程。</li><li>处理堆栈下方无效页面的页面错误。</li></ol><p>如果你的内核代码能通过 <code>lazytests</code> 和 <code>usertests</code>，那么你的解决方案是可接受的，输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$  lazytests
lazytests starting
running <span class="token builtin class-name">test</span> lazy alloc
<span class="token builtin class-name">test</span> lazy alloc: OK
running <span class="token builtin class-name">test</span> lazy unmap<span class="token punctuation">..</span>.
usertrap<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token punctuation">..</span>.
<span class="token builtin class-name">test</span> lazy unmap: OK
running <span class="token builtin class-name">test</span> out of memory
usertrap<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token punctuation">..</span>.
<span class="token builtin class-name">test</span> out of memory: OK
ALL TESTS PASSED
$ usertests
<span class="token punctuation">..</span>.
ALL TESTS PASSED
$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实验步骤-1" tabindex="-1"><a class="header-anchor" href="#实验步骤-1"><span>实验步骤</span></a></h3><p>修改<code>kernel/sysproc.c</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>uint64

<span class="token function">sys_sbrk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> addr<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  addr <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sz<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sz <span class="token operator">+=</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sz <span class="token operator">=</span> <span class="token function">uvmdealloc</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> addr <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>kernel/proc.c</code>的<code>is_lazy_alloc_va</code>方法</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// to check if the va is in the lazy allocate range</span>
<span class="token keyword">int</span> <span class="token function">is_lazy_alloc_va</span><span class="token punctuation">(</span>uint64 va<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// if va larger than the sz, it&#39;s means a invalid va</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>va <span class="token operator">&gt;=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>sz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
  <span class="token comment">//add code</span>
  <span class="token comment">// if va is in the gard page, it needn&#39;t to be allocate memory</span>
  <span class="token comment">// or it will cause a remap panic</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>va <span class="token operator">&lt;</span> <span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>sp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> va <span class="token operator">&gt;</span> <span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>sp<span class="token punctuation">)</span> <span class="token operator">-</span> PGSIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>kernel/vm.c</code>中的<code>walkaddr</code> 函数</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>uint64
<span class="token function">walkaddr</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">,</span> uint64 va<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte<span class="token punctuation">;</span>
  uint64 pa<span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>va <span class="token operator">&gt;=</span> MAXVA<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

  pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>pte <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_lazy_alloc_va</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lazy_alloc</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token function">walkaddr</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// if(pte == 0)</span>
  <span class="token comment">//       return 0;</span>
  <span class="token comment">// if((*pte &amp; PTE_V) == 0)</span>
  <span class="token comment">//   return 0;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_U<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> pa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="image-20240509111735902" tabindex="0" loading="lazy"><figcaption>image-20240509111735902</figcaption></figure>',13);function P(T,E){const t=o("ExternalLinkIcon");return c(),l("div",null,[d,n("h2",k,[n("a",v,[n("span",null,[s("Eliminate allocation from sbrk() ("),n("a",m,[s("easy"),e(t)]),s(")")])])]),b,n("h2",g,[n("a",y,[n("span",null,[s("Lazy allocation ("),n("a",f,[s("moderate"),e(t)]),s(")")])])]),h,n("h2",_,[n("a",w,[n("span",null,[s("Lazytests and Usertests ("),n("a",z,[s("moderate"),e(t)]),s(")")])])]),x])}const L=p(r,[["render",P],["__file","7-Lazy-page-allocation.html.vue"]]),N=JSON.parse(`{"path":"/cs-basics/os/6.S081/labs/7-Lazy-page-allocation.html","title":"Lab5:xv6 lazy page allocation","lang":"zh-CN","frontmatter":{"icon":"code-bold","date":"2025-01-08T00:00:00.000Z","category":["操作系统"],"tags":["MIT","XV6","riscv","C"],"description":"Lab5:xv6 lazy page allocation 操作系统可以通过页表硬件实现的众多巧妙技巧之一是对用户空间堆内存的延迟分配（lazy allocation）。Xv6应用程序通过sbrk()系统调用向内核请求堆内存。在我们提供的内核中，sbrk()会分配物理内存并将其映射到进程的虚拟地址空间。对于大型请求，内核分配和映射内存可能需要很长时间。...","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/labs/7-Lazy-page-allocation.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"Lab5:xv6 lazy page allocation"}],["meta",{"property":"og:description","content":"Lab5:xv6 lazy page allocation 操作系统可以通过页表硬件实现的众多巧妙技巧之一是对用户空间堆内存的延迟分配（lazy allocation）。Xv6应用程序通过sbrk()系统调用向内核请求堆内存。在我们提供的内核中，sbrk()会分配物理内存并将其映射到进程的虚拟地址空间。对于大型请求，内核分配和映射内存可能需要很长时间。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T07:15:39.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:published_time","content":"2025-01-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T07:15:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab5:xv6 lazy page allocation\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-15T07:15:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Eliminate allocation from sbrk() (easy)","slug":"eliminate-allocation-from-sbrk-easy","link":"#eliminate-allocation-from-sbrk-easy","children":[{"level":3,"title":"实验步骤","slug":"实验步骤","link":"#实验步骤","children":[]}]},{"level":2,"title":"Lazy allocation (moderate)","slug":"lazy-allocation-moderate","link":"#lazy-allocation-moderate","children":[{"level":3,"title":"实验代码","slug":"实验代码","link":"#实验代码","children":[]}]},{"level":2,"title":"Lazytests and Usertests (moderate)","slug":"lazytests-and-usertests-moderate","link":"#lazytests-and-usertests-moderate","children":[{"level":3,"title":"实验步骤","slug":"实验步骤-1","link":"#实验步骤-1","children":[]}]}],"git":{"createdTime":1736567690000,"updatedTime":1736925339000,"contributors":[{"name":"jh_personal@163.com","email":"jh_personal@163.com","commits":1}]},"readingTime":{"minutes":6.45,"words":1935},"filePathRelative":"cs-basics/os/6.S081/labs/7-Lazy-page-allocation.md","localizedDate":"2025年1月8日","excerpt":"\\n<p>操作系统可以通过页表硬件实现的众多巧妙技巧之一是对用户空间堆内存的延迟分配（lazy allocation）。Xv6应用程序通过<code>sbrk()</code>系统调用向内核请求堆内存。在我们提供的内核中，<code>sbrk()</code>会分配物理内存并将其映射到进程的虚拟地址空间。对于大型请求，内核分配和映射内存可能需要很长时间。例如，1GB的内存由262,144个4096字节的页面组成；即使每个分配操作都很廉价，但如此大量的分配操作仍然非常耗时。此外，一些程序分配的内存比实际使用的要多（例如，用于实现稀疏数组），或者提前分配内存但并未立即使用。为了在这些情况下让<code>sbrk()</code>更快地完成，复杂的内核会采用延迟分配用户内存的方式。也就是说，<code>sbrk()</code>不会立即分配物理内存，而是只记住哪些用户地址被分配，并在用户页表中将这些地址标记为无效。当进程首次尝试使用任何延迟分配的内存页面时，CPU会生成一个页错误（page fault），内核通过分配物理内存、将其清零并映射来处理这个错误。在这个实验中，你将向xv6添加这种延迟分配功能。</p>","autoDesc":true}`);export{L as comp,N as data};
