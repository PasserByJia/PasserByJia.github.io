import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as p,a as s,e as n,b as e,d as t}from"./app-BnTPEUH2.js";const c={},r=s("h1",{id:"lab-1-xv6-and-unix-utilities",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#lab-1-xv6-and-unix-utilities"},[s("span",null,"Lab 1: Xv6 and Unix utilities")])],-1),d=s("p",null,"这个lab将会使你熟悉xv6个它的系统调用。",-1),u={id:"boot-xv6-easy",tabindex:"-1"},m={class:"header-anchor",href:"#boot-xv6-easy"},b={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://pdos.csail.mit.edu/6.S081/2022/tools.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>如果你使用 Athena，你必须使用 x86 机器；也就是说，<code>uname -a</code> 应该显示 <code>i386 GNU/Linux</code> 或 <code>i686 GNU/Linux</code> 或 <code>x86_64 GNU/Linux</code>。你可以通过 <code>ssh -X athena.dialup.mit.edu</code> 登录到公共 Athena 主机。我们在 Athena 上为你设置了适当的编译器和模拟器。要使用它们，请运行 <code>add -f 6.828</code>。你必须在每次登录时运行此命令（或将其添加到你的 <code>~/.environment</code> 文件中）。如果你在编译或运行 qemu 时遇到晦涩的错误，请检查你是否添加了课程锁存器。 获取 xv6 实验的 git 仓库源代码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone git://g.csail.mit.edu/xv6-labs-2022
Cloning into <span class="token string">&#39;xv6-labs-2022&#39;</span><span class="token punctuation">..</span>.
<span class="token punctuation">..</span>.
$ <span class="token builtin class-name">cd</span> xv6-labs-2022
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仓库设置为在克隆仓库时检出 <code>util</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> status
On branch util
Your branch is up to <span class="token function">date</span> with <span class="token string">&#39;origin/util&#39;</span><span class="token builtin class-name">.</span>

nothing to commit, working tree clean

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>xv6-labs-2022</code> 仓库与书中的 <code>xv6-riscv</code> 略有不同；它主要添加了一些文件。如果你好奇，可以查看 git 日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你将需要使用 Git 版本控制系统分发的文件来完成这个和后续的实验任务。对于每个实验，你将检出（<code>git checkout util</code>）一个为该实验定制的 xv6 版本。要了解更多关于 Git 的信息，请查看 Git 用户手册，或者你可能会发现这个面向计算机的 Git 概述很有用。Git 允许你跟踪对代码所做的更改。例如，如果你完成了其中一个练习，并且想要检查你的进度，你可以通过运行以下命令提交你的更改：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;my solution for util lab exercise 1&#39;</span>
Created commit 60d2135: my solution <span class="token keyword">for</span> util lab exercise <span class="token number">1</span>
 <span class="token number">1</span> files changed, <span class="token number">1</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">0</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>git diff</code> 命令跟踪你的更改。运行 <code>git diff</code> 将显示自上次提交以来对代码的更改，而 <code>git diff origin/util</code> 将显示相对于初始 <code>util</code> 代码的更改。在这里，<code>origin/util</code> 是你为课程下载的初始代码的 git 分支名称。</p><p>构建并运行 xv6：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> qemu
riscv64-unknown-elf-gcc    <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> kernel/entry.o kernel/entry.S
riscv64-unknown-elf-gcc <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-Werror</span> <span class="token parameter variable">-O</span> -fno-omit-frame-pointer <span class="token parameter variable">-ggdb</span> <span class="token parameter variable">-DSOL_UTIL</span> <span class="token parameter variable">-MD</span> <span class="token parameter variable">-mcmodel</span><span class="token operator">=</span>medany <span class="token parameter variable">-ffreestanding</span> -fno-common <span class="token parameter variable">-nostdlib</span> -mno-relax -I. -fno-stack-protector -fno-pie -no-pie   <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> kernel/start.o kernel/start.c
<span class="token punctuation">..</span>.
riscv64-unknown-elf-ld <span class="token parameter variable">-z</span> max-page-size<span class="token operator">=</span><span class="token number">4096</span> <span class="token parameter variable">-N</span> <span class="token parameter variable">-e</span> main <span class="token parameter variable">-Ttext</span> <span class="token number">0</span> <span class="token parameter variable">-o</span> user/_zombie user/zombie.o user/ulib.o user/usys.o user/printf.o user/umalloc.o
riscv64-unknown-elf-objdump <span class="token parameter variable">-S</span> user/_zombie <span class="token operator">&gt;</span> user/zombie.asm
riscv64-unknown-elf-objdump <span class="token parameter variable">-t</span> user/_zombie <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;1,/SYMBOL TABLE/d; s/ .* / /; /^$/d&#39;</span> <span class="token operator">&gt;</span> user/zombie.sym
mkfs/mkfs fs.img README  user/xargstest.sh user/_cat user/_echo user/_forktest user/_grep user/_init user/_kill user/_ln user/_ls user/_mkdir user/_rm user/_sh user/_stressfs user/_usertests user/_grind user/_wc user/_zombie
nmeta <span class="token number">46</span> <span class="token punctuation">(</span>boot, super, log blocks <span class="token number">30</span> inode blocks <span class="token number">13</span>, bitmap blocks <span class="token number">1</span><span class="token punctuation">)</span> blocks <span class="token number">954</span> total <span class="token number">1000</span>
balloc: first <span class="token number">591</span> blocks have been allocated
balloc: <span class="token function">write</span> bitmap block at sector <span class="token number">45</span>
qemu-system-riscv64 <span class="token parameter variable">-machine</span> virt <span class="token parameter variable">-bios</span> none <span class="token parameter variable">-kernel</span> kernel/kernel <span class="token parameter variable">-m</span> 128M <span class="token parameter variable">-smp</span> <span class="token number">3</span> <span class="token parameter variable">-nographic</span> <span class="token parameter variable">-drive</span> <span class="token assign-left variable">file</span><span class="token operator">=</span>fs.img,if<span class="token operator">=</span>none,format<span class="token operator">=</span>raw,id<span class="token operator">=</span>x0 <span class="token parameter variable">-device</span> virtio-blk-device,drive<span class="token operator">=</span>x0,bus<span class="token operator">=</span>virtio-mmio-bus.0

xv6 kernel is booting

hart <span class="token number">2</span> starting
hart <span class="token number">1</span> starting
init: starting <span class="token function">sh</span>
$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在提示符下输入 <code>ls</code>，你应该会看到类似以下的输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span>
<span class="token builtin class-name">.</span>              <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1024</span>
<span class="token punctuation">..</span>             <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1024</span>
README         <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2227</span>
xargstest.sh   <span class="token number">2</span> <span class="token number">3</span> <span class="token number">93</span>
<span class="token function">cat</span>            <span class="token number">2</span> <span class="token number">4</span> <span class="token number">32864</span>
<span class="token builtin class-name">echo</span>           <span class="token number">2</span> <span class="token number">5</span> <span class="token number">31720</span>
forktest       <span class="token number">2</span> <span class="token number">6</span> <span class="token number">15856</span>
<span class="token function">grep</span>           <span class="token number">2</span> <span class="token number">7</span> <span class="token number">36240</span>
init           <span class="token number">2</span> <span class="token number">8</span> <span class="token number">32216</span>
<span class="token function">kill</span>           <span class="token number">2</span> <span class="token number">9</span> <span class="token number">31680</span>
<span class="token function">ln</span>             <span class="token number">2</span> <span class="token number">10</span> <span class="token number">31504</span>
<span class="token function">ls</span>             <span class="token number">2</span> <span class="token number">11</span> <span class="token number">34808</span>
<span class="token function">mkdir</span>          <span class="token number">2</span> <span class="token number">12</span> <span class="token number">31736</span>
<span class="token function">rm</span>             <span class="token number">2</span> <span class="token number">13</span> <span class="token number">31720</span>
<span class="token function">sh</span>             <span class="token number">2</span> <span class="token number">14</span> <span class="token number">54168</span>
stressfs       <span class="token number">2</span> <span class="token number">15</span> <span class="token number">32608</span>
usertests      <span class="token number">2</span> <span class="token number">16</span> <span class="token number">178800</span>
grind          <span class="token number">2</span> <span class="token number">17</span> <span class="token number">47528</span>
<span class="token function">wc</span>             <span class="token number">2</span> <span class="token number">18</span> <span class="token number">33816</span>
zombie         <span class="token number">2</span> <span class="token number">19</span> <span class="token number">31080</span>
console        <span class="token number">3</span> <span class="token number">20</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些是 <code>mkfs</code> 包含在初始文件系统中的文件；大多数是你可以运行的程序。你刚刚运行了其中一个：<code>ls</code>。</p><p>xv6 没有 <code>ps</code> 命令，但是，如果你输入 <code>Ctrl-p</code>，内核将打印每个进程的信息。如果你现在尝试，你会看到两行：一行是 <code>init</code>，另一行是 <code>sh</code>。</p><p>要退出 qemu，请输入：<code>Ctrl-a x</code>（同时按下 <code>Ctrl</code> 和 <code>a</code>，然后按 <code>x</code>）。</p><p>评分和提交程序<br> 你可以运行 <code>make grade</code> 来使用评分程序测试你的解决方案。助教将使用相同的评分程序为你的实验提交评分。此外，我们还将为实验安排检查会议（见评分政策）。</p><p>实验代码附带了 GNU Make 规则，以简化提交过程。在提交实验的最终更改后，输入 <code>make handin</code> 以提交你的实验。有关如何提交的详细说明，请参见下文。</p>`,18),h={id:"sleep-easy",tabindex:"-1"},g={class:"header-anchor",href:"#sleep-easy"},f={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="hint-container important"><p class="hint-container-title">重要</p><p>你需要在 xv6 中实现一个 UNIX 程序 <code>sleep</code>，该程序会暂停用户指定的时间（以 ticks 为单位）。ticks 是 xv6 内核定义的时间概念，即定时器芯片两次中断之间的时间。你的解决方案应该放在文件 <code>user/sleep.c</code> 中。 ### 提示：</p></div><ol><li><strong>阅读 xv6 书籍的第 1 章</strong>：在开始编码之前，先阅读 xv6 书籍的第 1 章，了解 xv6 的基本概念和系统调用。</li><li><strong>参考其他用户程序</strong>：查看 <code>user/</code> 目录下的其他程序（例如 <code>user/echo.c</code>、<code>user/grep.c</code> 和 <code>user/rm.c</code>），了解如何获取传递给程序的命令行参数。</li><li><strong>处理用户忘记传递参数的情况</strong>：如果用户忘记传递参数，<code>sleep</code> 应该打印一条错误消息。</li><li><strong>将字符串转换为整数</strong>：命令行参数以字符串形式传递；你可以使用 <code>atoi</code> 将其转换为整数（参见 <code>user/ulib.c</code>）。</li><li><strong>使用系统调用 <code>sleep</code></strong>：使用 <code>sleep</code> 系统调用。</li><li><strong>查看系统调用的实现</strong>：查看 <code>kernel/sysproc.c</code> 中的 <code>sys_sleep</code> 函数，了解 <code>sleep</code> 系统调用在 xv6 内核中的实现；查看 <code>user/user.h</code> 中的 <code>sleep</code> 函数定义，了解如何在用户程序中调用 <code>sleep</code>；查看 <code>user/usys.S</code> 中的汇编代码，了解如何从用户代码跳转到内核代码执行 <code>sleep</code>。</li><li><strong>退出程序</strong>：<code>main</code> 函数完成后应调用 <code>exit(0)</code>。</li><li><strong>将程序添加到 Makefile</strong>：将你的 <code>sleep</code> 程序添加到 <code>Makefile</code> 中的 <code>UPROGS</code>；完成后，运行 <code>make qemu</code> 将编译你的程序，并且你可以在 xv6 shell 中运行它。</li><li><strong>学习 C 语言</strong>：查看 Kernighan 和 Ritchie 的《C 程序设计语言》（第二版）（K&amp;R），学习 C 语言。</li></ol><h3 id="运行程序" tabindex="-1"><a class="header-anchor" href="#运行程序"><span>运行程序：</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> qemu
<span class="token punctuation">..</span>.
init: starting <span class="token function">sh</span>
$ <span class="token function">sleep</span> <span class="token number">10</span>
<span class="token punctuation">(</span>nothing happens <span class="token keyword">for</span> a little <span class="token keyword">while</span><span class="token punctuation">)</span>
$

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的程序如上所示运行时暂停，则你的解决方案是正确的。运行 <code>make grade</code> 查看你是否通过了 <code>sleep</code> 测试。</p><p>注意，<code>make grade</code> 会运行所有测试，包括下面任务的测试。如果你想运行特定任务的评分测试，可以输入：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./grade-lab-util <span class="token function">sleep</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将运行与 <code>sleep</code> 匹配的评分测试。或者，你可以输入：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> <span class="token assign-left variable">GRADEFLAGS</span><span class="token operator">=</span>sleep grade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="实验代码" tabindex="-1"><a class="header-anchor" href="#实验代码"><span>实验代码</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;kernel/types.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;kernel/stat.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;user/user.h&quot;</span></span>

<span class="token keyword">int</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token punctuation">{</span>
    <span class="token keyword">int</span> sleepTime <span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Usage: sleep time...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    sleepTime <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),_={id:"pingpong-easy",tabindex:"-1"},y={class:"header-anchor",href:"#pingpong-easy"},w={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},S=s("div",{class:"hint-container important"},[s("p",{class:"hint-container-title"},"重要"),s("p",null,[n("编写一个使用 UNIX 系统调用通过一对管道在两个进程之间进行“乒乓”字节交换的程序。父进程应向子进程发送一个字节；子进程应打印“pid: received ping”，其中 pid 是它的进程 ID，将字节写入管道发送给父进程，然后退出；父进程应从子进程读取字节，打印“pid: received pong”，然后退出。你的解决方案应放在文件 "),s("code",null,"user/pingpong.c"),n(" 中。")])],-1);function T(L,U){const a=o("ExternalLinkIcon");return l(),p("div",null,[r,d,s("h2",u,[s("a",m,[s("span",null,[n("Boot xv6 ("),s("a",b,[n("easy"),e(a)]),n(")")])])]),s("p",null,[n("你可以在Athena或者你自己的电脑上进行这些实验。如果你使用自己电脑进行实验，你需要看一下"),s("a",v,[n("lab tools page"),e(a)]),n("中的配置提示。")]),k,s("h2",h,[s("a",g,[s("span",null,[n("sleep ("),s("a",f,[n("easy"),e(a)]),n(")")])])]),x,s("h2",_,[s("a",y,[s("span",null,[n("pingpong ("),s("a",w,[n("easy"),e(a)]),n(")")])])]),S])}const $=i(c,[["render",T],["__file","1-lab-utils.html.vue"]]),q=JSON.parse(`{"path":"/cs-basics/os/6.S081/labs/1-lab-utils.html","title":"Lab 1:  Xv6 and Unix utilities","lang":"zh-CN","frontmatter":{"icon":"code-bold","date":"2024-10-31T00:00:00.000Z","category":["操作系统"],"tags":["MIT","C","riscv","XV6"],"description":"Lab 1: Xv6 and Unix utilities 这个lab将会使你熟悉xv6个它的系统调用。 Boot xv6 (easy) 你可以在Athena或者你自己的电脑上进行这些实验。如果你使用自己电脑进行实验，你需要看一下lab tools page中的配置提示。 如果你使用 Athena，你必须使用 x86 机器；也就是说，uname -a ...","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/labs/1-lab-utils.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"Lab 1:  Xv6 and Unix utilities"}],["meta",{"property":"og:description","content":"Lab 1: Xv6 and Unix utilities 这个lab将会使你熟悉xv6个它的系统调用。 Boot xv6 (easy) 你可以在Athena或者你自己的电脑上进行这些实验。如果你使用自己电脑进行实验，你需要看一下lab tools page中的配置提示。 如果你使用 Athena，你必须使用 x86 机器；也就是说，uname -a ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-13T02:56:12.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:published_time","content":"2024-10-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-13T02:56:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab 1:  Xv6 and Unix utilities\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-13T02:56:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Boot xv6 (easy)","slug":"boot-xv6-easy","link":"#boot-xv6-easy","children":[]},{"level":2,"title":"sleep (easy)","slug":"sleep-easy","link":"#sleep-easy","children":[{"level":3,"title":"运行程序：","slug":"运行程序","link":"#运行程序","children":[]},{"level":3,"title":"实验代码","slug":"实验代码","link":"#实验代码","children":[]}]},{"level":2,"title":"pingpong (easy)","slug":"pingpong-easy","link":"#pingpong-easy","children":[]}],"git":{"createdTime":1731466572000,"updatedTime":1731466572000,"contributors":[{"name":"jh_personal@163.com","email":"jh_personal@163.com","commits":1}]},"readingTime":{"minutes":13.68,"words":4104},"filePathRelative":"cs-basics/os/6.S081/labs/1-lab-utils.md","localizedDate":"2024年10月31日","excerpt":"\\n<p>这个lab将会使你熟悉xv6个它的系统调用。</p>\\n<h2><a class=\\"header-anchor\\" href=\\"#boot-xv6-easy\\"><span>Boot xv6&nbsp;(</span></a><a href=\\"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">easy</a>)</h2>\\n<p>你可以在Athena或者你自己的电脑上进行这些实验。如果你使用自己电脑进行实验，你需要看一下<a href=\\"https://pdos.csail.mit.edu/6.S081/2022/tools.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lab tools page</a>中的配置提示。</p>","autoDesc":true}`);export{$ as comp,q as data};
