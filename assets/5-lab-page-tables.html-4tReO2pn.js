import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a as n,e as s,b as e,d as p}from"./app-BmpF51CC.js";const i="/assets/image-20240509111735902-MYzY1ScM.png",u="/assets/image-20240510220242530-Uto9k6wD.png",r="/assets/image-20240511175800152-DvLz7eHw.png",d={},k=n("h1",{id:"lab-3-page-tables",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lab-3-page-tables"},[n("span",null,"Lab 3: page tables")])],-1),m={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/pgtbl.html",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>在这个实验中，你将探索页面表并修改它们以加速特定的系统调用，并检测哪些页面已被访问。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在你开始编码之前，请阅读 xv6 书的第三章以及相关文件：</p><ul><li>kernel/memlayout.h，其中包含内存布局的信息。</li><li>kernel/vm.c，其中包含大部分虚拟内存（VM）代码。</li><li>kernel/kalloc.c，其中包含分配和释放物理内存的代码。 同时，参考 RISC-V 特权架构手册可能也会有所帮助。</li></ul></div><p>要开始实验，请切换到 pgtbl 分支：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch 
$ <span class="token function">git</span> checkout pgtbl 
$ <span class="token function">make</span> clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),b={id:"speed-up-system-calls-easy",tabindex:"-1"},g={class:"header-anchor",href:"#speed-up-system-calls-easy"},h={href:"https://pdos.csail.mit.edu/6.S081/2023/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},f=p('<h3 id="实验要求翻译" tabindex="-1"><a class="header-anchor" href="#实验要求翻译"><span>实验要求翻译</span></a></h3><p>一些操作系统（例如Linux）通过在用户空间和内核之间共享一块只读空间来加速某些特定的系统调用。这消除了执行这些系统调用时需要内核交叉的需求。为了帮助你学习如何将映射插入到页面表中，你的第一个任务是为 xv6 中的 getpid() 系统调用实现这种优化。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>在每个进程创建时，在 USYSCALL（在 memlayout.h 中定义的一个虚拟地址）处映射一个只读页面。在这个页面的开头，存储一个 struct usyscall（也在 memlayout.h 中定义），并将其初始化为存储当前进程的 PID。在这个实验中，ugetpid() 已经在用户空间中提供，并将自动使用 USYSCALL 映射。如果运行 pgtbltest 时 ugetpid 测试用例通过，则你将获得此实验的完整学分。</p></div><p>一些提示：</p><ul><li>你可以在 kernel/proc.c 中的 proc_pagetable() 中执行映射。</li><li>选择允许用户空间只读取页面的权限位。</li><li>你可能会发现 mappages() 是一个有用的实用程序。</li><li>不要忘记在 allocproc() 中分配和初始化页面。 确保在 freeproc() 中释放页面。</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>ChatGPT 你还可以使用共享页面加速哪些其他 xv6 系统调用？请解释一下。</p></div><h3 id="实验操作" tabindex="-1"><a class="header-anchor" href="#实验操作"><span>实验操作</span></a></h3><p>进行实操前需要回答几个问题：</p><ol><li>usyscall这个结构体需要存在哪里</li><li>需要建立虚拟地址与物理地址的映射，物理地址要怎么获取？</li><li>初始化与释放需要做什么？</li></ol><h4 id="step1" tabindex="-1"><a class="header-anchor" href="#step1"><span>step1</span></a></h4><p>在 <code>proc.h</code>中声明一个<code>usyscall</code>结构体，用于存放共享页面。</p><figure><img src="'+i+`" alt="image-20240509111735902" tabindex="0" loading="lazy"><figcaption>image-20240509111735902</figcaption></figure><h4 id="step2" tabindex="-1"><a class="header-anchor" href="#step2"><span>step2</span></a></h4><p>在(<code>kernel/proc.c</code>)中修改<code>allocproc</code>方法，仿照给<code>trapframe</code>为<code>p-&gt;usyscall</code> 分配具体的物理地址，并且将进程的pid 保存到这个结构体之中。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>  <span class="token comment">// Allocate a usyscall page</span>
  <span class="token comment">//这里的地址其实就是一个物理地址，是需要在用户页表中与逻辑地址进行映射的的地址</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>usyscall <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">usyscall</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freeproc</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  p<span class="token operator">-&gt;</span>usyscall<span class="token operator">-&gt;</span>pid <span class="token operator">=</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 xv6 中，内核通过 <code>kalloc()</code> 来分配物理内存页面。</p></blockquote><h4 id="step3" tabindex="-1"><a class="header-anchor" href="#step3"><span>step3</span></a></h4><p>在<code>(kernel/proc.c)</code>中修改<code>proc_pagetable</code>方法，仿照给<code>trapframe</code>新增映射关系，这里实验有要求许用户空间只读取页面的权限位，所以使用权限<code>PTE_R</code>与<code>PTE_U</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span>USYSCALL<span class="token punctuation">,</span>PGSIZE<span class="token punctuation">,</span><span class="token punctuation">(</span>uint64<span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>usyscall<span class="token punctuation">)</span><span class="token punctuation">,</span> PTE_R <span class="token operator">|</span> PTE_U<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">uvmunmap</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> USYSCALL<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">uvmfree</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="step4" tabindex="-1"><a class="header-anchor" href="#step4"><span>step4</span></a></h4><p>在(<code>kernel/proc.c</code>)中修改<code>freeproc</code>与<code>proc_freepagetable</code>，在进程释放的时候将对应内存释放掉。</p><p><code>freeproc</code>中增加</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">freeproc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//新增代码 begin</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>usyscall<span class="token punctuation">)</span>
    <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token operator">-&gt;</span>usyscall<span class="token punctuation">)</span><span class="token punctuation">;</span>
  p<span class="token operator">-&gt;</span>usyscall <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//新增代码 end</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>trapframe<span class="token punctuation">)</span>
    <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token operator">-&gt;</span>trapframe<span class="token punctuation">)</span><span class="token punctuation">;</span>
  p<span class="token operator">-&gt;</span>trapframe <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">)</span>
    <span class="token function">proc_freepagetable</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>proc_freepagetable</code>中增加</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span>
<span class="token function">proc_freepagetable</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">,</span> uint64 sz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//为什么这里不释放会导致panic: freewalk: leaf</span>
  <span class="token function">uvmunmap</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> USYSCALL<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//新增行</span>
  <span class="token function">uvmunmap</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> TRAMPOLINE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">uvmunmap</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> TRAPFRAME<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">uvmfree</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><p>由step2可以看出内核中其实是可以直接进行物理内存的操作，包括分配内存，和写入数据。那么这里就有个人有个疑问就是，逻辑地址的重要性到现在体现的还不是很明显，这个问题还有待回答。</p><p>还有就是step4中为什么不释放USYSCALL所在内存会导致panic？freeproc这个方法在进程的生命周期的哪个阶段会被调用，一个进程的所有内存没被全部释放掉会导致什么问题？</p><p>以上疑问有待解决。</p>`,29),y={id:"print-a-page-table-easy",tabindex:"-1"},_={class:"header-anchor",href:"#print-a-page-table-easy"},x={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},w=p(`<h3 id="实验要求翻译-1" tabindex="-1"><a class="header-anchor" href="#实验要求翻译-1"><span>实验要求翻译</span></a></h3><p>为了帮助你形象化 RISC-V 的页表，并可能帮助未来的调试工作，你的第二个任务是编写一个函数，打印页表的内容。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>定义一个名为 <code>vmprint()</code> 的函数。它应该接受一个 <code>pagetable_t</code> 参数，并以下述格式打印该页表。在 <code>exec.c</code> 中的 <code>return argc</code> 之前插入 <code>if(p-&gt;pid==1) vmprint(p-&gt;pagetable)</code>，以打印第一个进程的页表。如果通过 <code>make grade</code> 中的页表项打印测试，则你将获得此部分实验的全部学分。</p></div><p>当你启动xv6的时候它应该输出以下内容，描述在第一个进程刚刚完成执行 <code>init</code> 的 <code>exec()</code> 时的页表。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>page table 0x0000000087f6b000
 ..0: pte 0x0000000021fd9c01 pa 0x0000000087f67000
 .. ..0: pte 0x0000000021fd9801 pa 0x0000000087f66000
 .. .. ..0: pte 0x0000000021fda01b pa 0x0000000087f68000
 .. .. ..1: pte 0x0000000021fd9417 pa 0x0000000087f65000
 .. .. ..2: pte 0x0000000021fd9007 pa 0x0000000087f64000
 .. .. ..3: pte 0x0000000021fd8c17 pa 0x0000000087f63000
 ..255: pte 0x0000000021fda801 pa 0x0000000087f6a000
 .. ..511: pte 0x0000000021fda401 pa 0x0000000087f69000
 .. .. ..509: pte 0x0000000021fdcc13 pa 0x0000000087f73000
 .. .. ..510: pte 0x0000000021fdd007 pa 0x0000000087f74000
 .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000
init: starting sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行显示了 <code>vmprint</code> 的参数。之后每个PTE（页表项）都有一行，包括指向页表树中更深层的PTE。每行的页表项使用几个“..”缩进用于表明其在页表树中的深度。每行PTE显示PTE在其所在页表中的索引，比特位，以及从页表项中提取的物理地址。不要打印无效的页表项。在上面的例子中顶层页表页对条目 0 和 255 进行了映射。下一级对于条目 0 仅映射了索引 0，而该索引 0 的底层页表页有条目 0、1 和 2 进行了映射。</p><p>你的代码可能会显示与上面不同的物理地址。但是这些条目和虚拟地址应该是相同的。</p><p>一些提示：</p><ul><li>你可以在 将<code>vmprint()</code>放在<code>kernel/vm.c</code>中</li><li>使用文件 <code>kernel/riscv.h</code> 末尾的宏。</li><li>方法<code>freewalk</code>也许会有启发。</li><li>在 <code>kernel/defs.h</code> 中定义 <code>vmprint</code> 的原型，这样你就可以从 <code>exec.c</code> 中调用它。</li><li>在 <code>printf</code> 调用中使用 <code>%p</code> 来以完整的 64 位十六进制形式打印页表项和地址，就像示例中所示的一样</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>解释 <code>vmprint</code> 的输出与文本中的图 3-4 的关系。页面 0 包含什么？页面 2 中有什么？在用户模式下，进程能读/写页面 1 映射的内存吗？倒数第三页包含什么？</p></div><h3 id="实验操作-1" tabindex="-1"><a class="header-anchor" href="#实验操作-1"><span>实验操作</span></a></h3><h4 id="step1-1" tabindex="-1"><a class="header-anchor" href="#step1-1"><span>step1</span></a></h4><p>在vmprint中，参照freewalk实现。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//提前将点保存好，可以减少写if else</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;.. ..&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;.. .. ..&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">vmprint</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">,</span>uint64 level<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//打印最顶层的页表信息</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;page table %p\\n&quot;</span><span class="token punctuation">,</span>pagetable<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//遍历页表项 2^9 = 512 所以一个页表中应该有512个页表项</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">512</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">pte_t</span> pte <span class="token operator">=</span> pagetable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//由方法名可以得出这个child其实就是pte对应的物理地址</span>
      uint64 child <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%d: pte %p pa %p\\n&quot;</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>pte<span class="token punctuation">,</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//页表树层级总共就三层，再继续递归会导致出错</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>level<span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">vmprint</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">)</span>child<span class="token punctuation">,</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;vmprint: leaf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="step2-1" tabindex="-1"><a class="header-anchor" href="#step2-1"><span>step2</span></a></h4><p>在<code>defs.h</code>中增加<code>vmprint</code>声明</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// vm.c</span>
<span class="token keyword">void</span>            <span class="token function">kvminit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">kvminithart</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">kvmmap</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>             <span class="token function">mappages</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">pagetable_t</span>     <span class="token function">uvmcreate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">uvmfirst</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uchar <span class="token operator">*</span><span class="token punctuation">,</span> uint<span class="token punctuation">)</span><span class="token punctuation">;</span>
uint64          <span class="token function">uvmalloc</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
uint64          <span class="token function">uvmdealloc</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>             <span class="token function">uvmcopy</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> <span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">uvmfree</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">uvmunmap</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">uvmclear</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">pte_t</span> <span class="token operator">*</span>         <span class="token function">walk</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
uint64          <span class="token function">walkaddr</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>             <span class="token function">copyout</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>             <span class="token function">copyin</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>             <span class="token function">copyinstr</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> uint64<span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">vmprint</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span>uint64<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新增</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="step3-1" tabindex="-1"><a class="header-anchor" href="#step3-1"><span>step3</span></a></h4><p>在<code>exec.c</code>中调用<code>vmprint</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>  <span class="token comment">//...省略</span>
  oldpagetable <span class="token operator">=</span> p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">;</span>
  p<span class="token operator">-&gt;</span>pagetable <span class="token operator">=</span> pagetable<span class="token punctuation">;</span>
  p<span class="token operator">-&gt;</span>sz <span class="token operator">=</span> sz<span class="token punctuation">;</span>
  p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>epc <span class="token operator">=</span> elf<span class="token punctuation">.</span>entry<span class="token punctuation">;</span>  <span class="token comment">// initial program counter = main</span>
  p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>sp <span class="token operator">=</span> sp<span class="token punctuation">;</span> <span class="token comment">// initial stack pointer</span>
  <span class="token function">proc_freepagetable</span><span class="token punctuation">(</span>oldpagetable<span class="token punctuation">,</span> oldsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//新增代码begin</span>
  <span class="token comment">//只打印第一个进程的页表</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pid <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">vmprint</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//新增代码end</span>
  <span class="token keyword">return</span> argc<span class="token punctuation">;</span> <span class="token comment">// this ends up in a0, the first argument to main(argc, argv)</span>
  <span class="token comment">//...省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实验结果" tabindex="-1"><a class="header-anchor" href="#实验结果"><span>实验结果</span></a></h4><figure><img src="`+u+'" alt="image-20240510220242530" tabindex="0" loading="lazy"><figcaption>image-20240510220242530</figcaption></figure><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h4><p>实验还是比较容易的，需要注意的是对页表树层级的处理。</p>',24),P={id:"detect-which-pages-have-been-accessed-hard",tabindex:"-1"},T={class:"header-anchor",href:"#detect-which-pages-have-been-accessed-hard"},L={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},S=p('<h3 id="实验要求翻译-2" tabindex="-1"><a class="header-anchor" href="#实验要求翻译-2"><span>实验要求翻译</span></a></h3><p>一些垃圾回收器（自动内存管理的一种形式）可以从哪些页面已经被访问（读取或写入）的信息中获益。在这一部分的实验，你将给xv6添加一个新特性，通过检测RISC-V 页表中的进入位，检测并向用户空间报告这些信息。RISC-V 硬件页表<strong>遍历器</strong>（walker）在解析 TLB miss 时会将这些位标记在页表项中。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>你的任务是实现 <code>pgaccess()</code>，一个报告哪些页面已被访问的系统调用。该系统调用接受三个参数。首先，它接受要检查的第一个用户页的起始虚拟地址。其次，它接受要检查的页数。最后，它接受一个用户地址，用于将结果存储到一个位掩码中（一种数据结构，每页使用一个位，其中第一页对应最低有效位）。当运行 <code>pgtbltest</code> 时，如果 <code>pgaccess</code> 测试用例通过，你将获得此部分实验的全部学分。</p></div><p>一些建议：</p><ul><li>阅读 <code>user/pgtlbtest.c</code> 中的 <code>pgaccess_test()</code>，了解 <code>pgaccess</code> 的使用方法。</li><li>首先，在 <code>kernel/sysproc.c</code> 中实现 <code>sys_pgaccess()</code>。</li><li>你需要使用 <code>argaddr()</code> 和 <code>argint()</code> 来解析参数。</li><li>对于输出的位掩码，最好在内核中存储一个临时缓冲区，并在填充正确的位之后将其复制到用户空间（通过 <code>copyout()</code>）。</li><li>对可以扫描的页数设置一个上限是可以接受的。</li><li><code>kernel/vm.c</code> 中的 <code>walk()</code> 对于查找正确的页表项非常有用。</li><li>你需要在 <code>kernel/riscv.h</code> 中定义 <code>PTE_A</code>，即访问位。请查阅 RISC-V 特权架构手册以确定其值。</li><li>确保在检查设置了访问位后清除 <code>PTE_A</code>。否则，将无法确定自上次调用 <code>pgaccess()</code> 以来是否访问了页面（即，该位将永远被设置）。</li><li>在调试页表时，可能会用到 <code>vmprint()</code>。</li></ul><h3 id="实验操作-2" tabindex="-1"><a class="header-anchor" href="#实验操作-2"><span>实验操作</span></a></h3><h4 id="step1-2" tabindex="-1"><a class="header-anchor" href="#step1-2"><span>step1</span></a></h4><p>确定<code>PTE_A</code>，访问位在页表项中的位置。</p><figure><img src="'+r+`" alt="image-20240511175800152" tabindex="0" loading="lazy"><figcaption>image-20240511175800152</figcaption></figure><p>查阅手册可以知道是在第六位。因此在<code>kernel/riscv.h</code>中进行如下修改。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_V</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token comment">// valid</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_R</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_W</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_X</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_U</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> </span><span class="token comment">// user can access</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_A</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> </span><span class="token comment">// access bits 新增</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="step2-2" tabindex="-1"><a class="header-anchor" href="#step2-2"><span>step2</span></a></h4><p>实现，实验要求代码</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span>
<span class="token function">sys_pgaccess</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//接收用户空间传过来的三个参数</span>
  uint64 buf<span class="token punctuation">;</span><span class="token comment">//这是虚拟地址</span>
  <span class="token keyword">int</span> size <span class="token punctuation">;</span>
  uint64 abits<span class="token punctuation">;</span>
  <span class="token function">argaddr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">argaddr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>abits<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//这里是第四个提示，需要创建一个临时的缓冲区</span>
  <span class="token keyword">int</span> abitss <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//去获取当前进程</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> va <span class="token operator">=</span> buf <span class="token operator">+</span> i <span class="token operator">*</span> PGSIZE<span class="token punctuation">;</span>
    <span class="token keyword">int</span> abit  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//从用户空间传过来的是虚拟地址，所以判断这个地址是否被访问过，需要去查页表</span>
    <span class="token comment">//这里也就体现出来walk函数的作用了，通过虚拟地址查找页表项。</span>
    <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span>va<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pte <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//查到对应页表项后，就去检查对应的标志位</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_A<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>PTE_A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清零 pte_a</span>
      abit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//将结果保存到缓冲区</span>
    abitss <span class="token operator">=</span> abitss <span class="token operator">|</span> abit <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//将结果复制回用户空间</span>
  <span class="token function">copyout</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span>abits<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>abitss<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>abitss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h4><p>这部分实验有点难地方有两个</p><ol><li>是要理解，用户空间中所有的变量地址都是虚拟地址，所以在<code>pgtabltest.c</code>的调用<code>pgaccess(buf, 32, &amp;abits) </code>中buf其实传入的是虚拟地址。所以要想知道一个页面是否被访问过，就需要去查当前进程的页表，这也是提示中为什么说要用walk函数。</li><li>在xv6中页面大小是4kb，也就是一个PGSIZE。所以一个页表项记录的是这个4kb大小页面的起始地址。这也就是为什么，代码中每次处理的时候只需要<code>int va = buf + i * PGSIZE;</code>按照页面大小一直加就可以。</li></ol><p>通过这个实验，可以对虚拟地址，页表项之间的关系有一个很清晰的认识，在用户空间所有的能操作的地址都是虚拟地址，当我们要在内核中进行管理和操作的时候我们可以根据页表对物理内存进行修改。</p>`,18);function E(z,A){const a=c("ExternalLinkIcon");return o(),l("div",null,[k,n("blockquote",null,[n("p",null,[s("实验原文地址："),n("a",m,[s("Lab: page tables (mit.edu)"),e(a)])])]),v,n("h2",b,[n("a",g,[n("span",null,[s("Speed up system calls ("),n("a",h,[s("easy"),e(a)]),s(")")])])]),f,n("h2",y,[n("a",_,[n("span",null,[s("Print a page table ("),n("a",x,[s("easy"),e(a)]),s(")")])])]),w,n("h2",P,[n("a",T,[n("span",null,[s("Detect which pages have been accessed ("),n("a",L,[s("hard"),e(a)]),s(")")])])]),S])}const V=t(d,[["render",E],["__file","5-lab-page-tables.html.vue"]]),I=JSON.parse(`{"path":"/cs-basics/os/6.S081/labs/5-lab-page-tables.html","title":"Lab 3: page tables","lang":"zh-CN","frontmatter":{"icon":"code-bold","date":"2024-05-08T00:00:00.000Z","category":["操作系统"],"tag":["MIT","XV6","riscv","C"],"description":"Lab 3: page tables 实验原文地址：Lab: page tables (mit.edu) 在这个实验中，你将探索页面表并修改它们以加速特定的系统调用，并检测哪些页面已被访问。 注意 在你开始编码之前，请阅读 xv6 书的第三章以及相关文件： kernel/memlayout.h，其中包含内存布局的信息。 kernel/vm.c，其中包含...","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/labs/5-lab-page-tables.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"Lab 3: page tables"}],["meta",{"property":"og:description","content":"Lab 3: page tables 实验原文地址：Lab: page tables (mit.edu) 在这个实验中，你将探索页面表并修改它们以加速特定的系统调用，并检测哪些页面已被访问。 注意 在你开始编码之前，请阅读 xv6 书的第三章以及相关文件： kernel/memlayout.h，其中包含内存布局的信息。 kernel/vm.c，其中包含..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T10:35:42.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:published_time","content":"2024-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-11T10:35:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab 3: page tables\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-11T10:35:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Speed up system calls (easy)","slug":"speed-up-system-calls-easy","link":"#speed-up-system-calls-easy","children":[{"level":3,"title":"实验要求翻译","slug":"实验要求翻译","link":"#实验要求翻译","children":[]},{"level":3,"title":"实验操作","slug":"实验操作","link":"#实验操作","children":[]}]},{"level":2,"title":"Print a page table (easy)","slug":"print-a-page-table-easy","link":"#print-a-page-table-easy","children":[{"level":3,"title":"实验要求翻译","slug":"实验要求翻译-1","link":"#实验要求翻译-1","children":[]},{"level":3,"title":"实验操作","slug":"实验操作-1","link":"#实验操作-1","children":[]}]},{"level":2,"title":"Detect which pages have been accessed (hard)","slug":"detect-which-pages-have-been-accessed-hard","link":"#detect-which-pages-have-been-accessed-hard","children":[{"level":3,"title":"实验要求翻译","slug":"实验要求翻译-2","link":"#实验要求翻译-2","children":[]},{"level":3,"title":"实验操作","slug":"实验操作-2","link":"#实验操作-2","children":[]}]}],"git":{"createdTime":1715185891000,"updatedTime":1715423742000,"contributors":[{"name":"JH","email":"jh_personal@163.com","commits":11}]},"readingTime":{"minutes":10.67,"words":3200},"filePathRelative":"cs-basics/os/6.S081/labs/5-lab-page-tables.md","localizedDate":"2024年5月8日","excerpt":"\\n<blockquote>\\n<p>实验原文地址：<a href=\\"https://pdos.csail.mit.edu/6.S081/2022/labs/pgtbl.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Lab: page tables (mit.edu)</a></p>\\n</blockquote>\\n<p>在这个实验中，你将探索页面表并修改它们以加速特定的系统调用，并检测哪些页面已被访问。</p>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>在你开始编码之前，请阅读 xv6 书的第三章以及相关文件：</p>\\n<ul>\\n<li>kernel/memlayout.h，其中包含内存布局的信息。</li>\\n<li>kernel/vm.c，其中包含大部分虚拟内存（VM）代码。</li>\\n<li>kernel/kalloc.c，其中包含分配和释放物理内存的代码。 同时，参考 RISC-V 特权架构手册可能也会有所帮助。</li>\\n</ul>\\n</div>","autoDesc":true}`);export{V as comp,I as data};
