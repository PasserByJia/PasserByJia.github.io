import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as i,a as n,e as s,b as e,d as t}from"./app-DkLPvhYZ.js";const l="/assets/image-20240629151959750-CTONVI83.png",r="/assets/image-20240629180818380-DZLhJ_Hp.png",d="/assets/image-20240701103916088-Bcx6KJEH.png",u="/assets/image-20240701104546657-CaxKgMtp.png",k={},m=t(`<h1 id="lab-4-traps" tabindex="-1"><a class="header-anchor" href="#lab-4-traps"><span>Lab 4:traps</span></a></h1><p>本实验探索系统调用如何实现陷入。你将使用栈先进行一些热身训练，之后你将实现一个用户计陷入处理的例子。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在你开始编码之前，请阅读 xv6 书的第四章以及相关文件：</p><ul><li><code>kernel/trampoline.S</code>: 涉及从用户空间切换到内核空间以及返回的汇编过程。</li><li><code>kernel/trap.c</code>: 处理所有中断的代码。</li></ul></div><p>开始实验前，请切换到trap分支:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  $ <span class="token function">git</span> fetch
  $ <span class="token function">git</span> checkout traps
  $ <span class="token function">make</span> clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),v={id:"risc-v-assembly-easy",tabindex:"-1"},b={class:"header-anchor",href:"#risc-v-assembly-easy"},h={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},g=n("h3",{id:"实验要求翻译",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实验要求翻译"},[n("span",null,"实验要求翻译")])],-1),f=n("code",null,"user/call.c",-1),y=n("code",null,"make fs.img",-1),_=n("code",null,"user/call.asm",-1),x=n("code",null,"call.asm",-1),w={href:"https://pdos.csail.mit.edu/6.S081/2022/reference.html",target:"_blank",rel:"noopener noreferrer"},q=t('<li><p>哪些寄存器中存放方法中的参数？例如哪个寄存器保存<code>main</code>调用<code>print</code>打印的13？</p><blockquote><p>a0-a7保存了方法中的参数，13保存在了a2寄存器中。</p></blockquote></li><li><p>汇编代码中的<code>main</code>在哪里调用了方法f，在哪里调用了g？（提示：编译器可能会内链函数）</p><blockquote><p>没有调用，g(x)函数被内链到f(x)中，f(x)又被内链到main中。</p></blockquote></li><li><p>函数<code>printf</code>的地址是什么？</p><blockquote><p>0x642</p><p>这个地址在汇编代码的这一行，每个人编译后的结果不一定相同</p><figure><img src="'+l+'" alt="图1" tabindex="0" loading="lazy"><figcaption>图1</figcaption></figure></blockquote></li><li><p>在主函数中执行jalr指令跳转到printf之后，寄存器ra中的值是什么？</p><blockquote><p>ra 是return address的缩写，返回地址。</p><p>34: 612080e7 jalr 1554(ra) # 642 <code>&lt;printf&gt;</code></p><p>jalr 做两步操作：</p><ol><li>把pc + 4 的值记为t</li><li>把pc的值设置成 $ra + 1554</li><li>把ra寄存器的值设置成t</li></ol></blockquote></li>',4),S=t(`<p>运行以下代码</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0x00646c72</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;H%x Wo%s&quot;</span><span class="token punctuation">,</span> <span class="token number">57616</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),P={href:"https://www.asciitable.com/",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"输出取决于RISC-V采用小端序这一事实。如果RISC-V采用的是大端序，为了得到相同的输出，你需要将i设置为什么值？是否需要将57616更改为不同的值？",-1),N={href:"http://www.webopedia.com/TERM/b/big_endian.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.rfc-editor.org/ien/ien137.txt",target:"_blank",rel:"noopener noreferrer"},R=n("blockquote",null,[n("p",null,'输出是"HE110 World",大端序应该是0x726c6400，不需要将16进制的57616改成别的值。')],-1),T=t(`<li><p>下面的代码中什么会打印在<code>y=</code>的后面（答案不是一个特殊值）。为什么会发生这种情况？</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x=%d y=%d&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>y是一个随机值，取决于调用前保存y的寄存器中存的是什么值。</p></blockquote></li>`,1),U={id:"backtrace-moderate",tabindex:"-1"},I={class:"header-anchor",href:"#backtrace-moderate"},O={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},V=t(`<h3 id="实验要求翻译-1" tabindex="-1"><a class="header-anchor" href="#实验要求翻译-1"><span>实验要求翻译</span></a></h3><p>对于调试来说，拥有一个回溯（backtrace）通常是非常有用的：这是一个在错误发生点之上的堆栈中函数调用的列表。为了帮助生成回溯，编译器生成机器代码，该代码在堆栈上维护与当前调用链中每个函数相对应的堆栈帧。每个堆栈帧包含返回地址和一个指向调用者堆栈帧的“帧指针”。寄存器<code>s0</code>包含指向当前堆栈帧的指针（实际上它指向堆栈上保存的返回地址的地址加上8）。你的<code>backtrace</code>应该使用帧指针来遍历堆栈，并打印每个堆栈帧中保存的返回地址。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>在 <code>kernel/printf.c</code> 中实现一个 <code>backtrace()</code> 函数。在 <code>sys_sleep</code> 中插入对该函数的调用，然后运行 <code>bttest</code>，它会调用 <code>sys_sleep</code>。你的输出应该是一个返回地址列表，形式如下（但数字可能会有所不同）：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>backtrace:
    0x0000000080002cda
   0x0000000080002bb6
    0x0000000080002898
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>bttest</code> 退出 qemu 后，在终端窗口中运行 <code>addr2line -e kernel/kernel</code>（或 <code>riscv64-unknown-elf-addr2line -e kernel/kernel</code>），并从你的回溯中剪切和粘贴地址，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> $ addr2line -e kernel/kernel
   0x0000000080002de2
    0x0000000080002f4a
   0x0000000080002bfc
    Ctrl-D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你应该会看到类似以下的内容：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>kernel/sysproc.c:74
kernel/syscall.c:224
kernel/trap.c:85
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>一些提示：</p><ul><li><p>在 <code>kernel/defs.h</code> 中添加 <code>backtrace()</code> 的声明，以便你可以在 <code>sys_sleep</code> 中调用 <code>backtrace</code>。</p></li><li><p>GCC 编译器将当前执行函数的帧指针存储在寄存器 <code>s0</code> 中。在 <code>kernel/riscv.h</code> 中添加以下函数：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64
<span class="token function">r_fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uint64 x<span class="token punctuation">;</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">&quot;mv %0, s0&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;=r&quot;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在 <code>backtrace</code> 中调用此函数以读取当前帧指针。<code>r_fp()</code> 使用内联汇编来读取 <code>s0</code>。</p></li><li><p>这些讲义中有一张堆栈帧布局的图片。注意，返回地址位于堆栈帧指针的固定偏移量（-8）处，而保存的帧指针位于堆栈帧指针的固定偏移量（-16）处。</p><figure><img src="`+r+`" alt="图2" tabindex="0" loading="lazy"><figcaption>图2</figcaption></figure></li><li><p>你的 <code>backtrace()</code> 需要一种方法来识别它已经看到了最后一个堆栈帧，并且应该停止。一个有用的事实是，为每个内核堆栈分配的内存由一个单一的页面对齐页组成，因此给定堆栈的所有堆栈帧都在同一页上。你可以使用 <code>PGROUNDDOWN(fp)</code>（参见 <code>kernel/riscv.h</code>）来识别帧指针所引用的页。</p></li></ul><p>一旦你的 <code>backtrace</code> 工作正常，从 <code>kernel/printf.c</code> 中的 <code>panic</code> 调用它，以便在内核崩溃时看到内核的回溯信息。</p><h3 id="实验操作" tabindex="-1"><a class="header-anchor" href="#实验操作"><span>实验操作</span></a></h3><h4 id="step1" tabindex="-1"><a class="header-anchor" href="#step1"><span>step1</span></a></h4><p>在<code>kernel/defs.h</code>中增加声明：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// printf.c</span>
<span class="token keyword">void</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">printfinit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//新增代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="step2" tabindex="-1"><a class="header-anchor" href="#step2"><span>step2</span></a></h4><p>在<code>kernel/riscv.h</code>增加如下代码：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> uint64
<span class="token function">r_fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  uint64 x<span class="token punctuation">;</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">&quot;mv %0, s0&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;=r&quot;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="step3" tabindex="-1"><a class="header-anchor" href="#step3"><span>step3</span></a></h4><p>在<code>kernel/print.c</code>编写<code>backtrace方法</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> 
<span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//获取当前栈指针的地址</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;backtrace: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  uint64 fp <span class="token operator">=</span> <span class="token function">r_fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  uint64 up <span class="token operator">=</span> <span class="token function">PGROUNDUP</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fp<span class="token operator">&lt;</span>up<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//指针的小用法</span>
    uint64 <span class="token operator">*</span>frame  <span class="token operator">=</span> <span class="token punctuation">(</span>uint64 <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p \\n&quot;</span><span class="token punctuation">,</span>frame<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fp <span class="token operator">=</span> frame<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意提示中的<code>PGROUNDDOWN </code>与 <code>PGROUNDUP</code>是一对方法</p><ul><li><p><code>PGROUNDUP</code>：将给定地址向上舍入到最近的页面边界。</p></li><li><p><code>PGROUNDDOWN</code>：将给定地址向下舍入到最近的页面边界。</p></li></ul><p>尝试使用<code>PGROUNDDOWN</code>地址来控制循环，最后总会出现一个多余的地址输出，而改用 <code>PGROUNDUP</code>后，输出结果是正确的。</p><h4 id="step4" tabindex="-1"><a class="header-anchor" href="#step4"><span>step4</span></a></h4><p>在<code>kernel/sysproc.c</code>中的<code>sys_sleep</code>中增加<code>backtrace</code>的调用。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>uint64
<span class="token function">sys_sleep</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span>
  uint ticks0<span class="token punctuation">;</span>
  <span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加调用</span>
  <span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
 。。。
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知识补充-by" tabindex="-1"><a class="header-anchor" href="#知识补充-by"><span>知识补充(by ** **)</span></a></h2><ul><li><p>函数调用栈</p><p><code>xv6</code>中的页面大小为4KB，栈指针保存在<code>sp</code>寄存器中。</p><figure><img src="`+d+'" alt="图3" tabindex="0" loading="lazy"><figcaption>图3</figcaption></figure></li><li><p>栈帧</p><p>当前栈帧的地址保存在 <code>s0/fp</code>寄存器里，栈帧指针往下偏移8个字节是函数返回地址 <code>return address</code>，往下偏移16个字节是上一个栈帧的栈帧指针(previous frame pointer)</p><figure><img src="'+u+'" alt="图4" tabindex="0" loading="lazy"><figcaption>图4</figcaption></figure><p>栈从高地址向低地址增长，每个大的<code>box</code>叫一个<code>stack frame</code>(栈帧)，栈帧由函数调用来分配，每个栈帧大小不一定一样，但是栈帧的最高处一定是<code>return address</code></p><p><code>sp</code>是<code>stack pointer</code>，用于指向栈顶(低地址)，保存在寄存器中</p><p><code>fp</code>是<code>frame pointer</code>，用于指向当前帧底部(高地址)，保存在寄存器中，同时每个函数栈帧中保存了调用当前函数的函数(父函数)的<code>fp</code>(保存在<code>to prev frame</code>那一栏中)</p><p>这些栈帧都是由编译器编译生成的汇编文件生成的</p></li></ul>',24),L={id:"alarm-hard",tabindex:"-1"},z={class:"header-anchor",href:"#alarm-hard"},G={href:"https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="hint-container important"><p class="hint-container-title">重要</p><p>在这个练习中，你将为xv6添加一个功能，使其定期提醒一个进程在使用CPU时间。这对于希望限制CPU时间消耗的计算密集型进程，或者对于既想进行计算又想定期执行某些操作的进程可能很有用。更广泛地说，你将实现一种用户级中断/故障处理程序的原始形式；例如，你可以使用类似的方法来处理应用程序中的页面错误。如果你的解决方案通过了<code>alarmtest</code>和<code>usertests -q</code>，那么它就是正确的。</p></div><p>你应该添加一个新的系统调用 <code>sigalarm(interval, handler)</code>。如果一个应用程序调用了 <code>sigalarm(n, fn)</code>，那么在程序消耗的每 <code>n</code> 个 &quot;ticks&quot; 的 CPU 时间后，内核应该调用应用程序函数 <code>fn</code>。当 <code>fn</code> 返回时，应用程序应该从离开的地方继续执行。在 xv6 中，一个 &quot;tick&quot; 是一个相当任意的时间单位，由硬件定时器生成中断的频率决定。如果应用程序调用了 <code>sigalarm(0, 0)</code>，内核应该停止生成周期性的警报调用。</p><p>你会在你的 xv6 仓库中找到一个文件 <code>user/alarmtest.c</code>。将其添加到 <code>Makefile</code> 中。在你添加了 <code>sigalarm</code> 和 <code>sigreturn</code> 系统调用之前，它不会正确编译（见下文）。</p><p><code>alarmtest</code> 在 <code>test0</code> 中调用 <code>sigalarm(2, periodic)</code>，请求内核每 2 个 ticks 强制调用 <code>periodic()</code>，然后旋转一段时间。你可以在 <code>user/alarmtest.asm</code> 中看到 <code>alarmtest</code> 的汇编代码，这可能对调试很有帮助。当 <code>alarmtest</code> 产生如下输出并且 <code>usertests -q</code> 也能正确运行时，你的解决方案是正确的：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ alarmtest
test0 start
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>alarm<span class="token operator">!</span>
test0 passed
test1 start
<span class="token punctuation">..</span>.alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>.alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>.alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>.alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>.alarm<span class="token operator">!</span>
<span class="token punctuation">..</span>alarm<span class="token operator">!</span>
test1 passed
test2 start
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>alarm<span class="token operator">!</span>
test2 passed
test3 start
test3 passed
$ usertest <span class="token parameter variable">-q</span>
<span class="token punctuation">..</span>.
ALL TESTS PASSED
$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你完成时，你的解决方案将只有几行代码，但要正确实现可能会有些棘手。我们将使用原始仓库中的<code>alarmtest.c</code>版本测试你的代码。你可以修改<code>alarmtest.c</code>来帮助你调试，但请确保原始的<code>alarmtest</code>显示所有测试都通过。</p><h3 id="test0-invoke-handler" tabindex="-1"><a class="header-anchor" href="#test0-invoke-handler"><span>test0: invoke handler</span></a></h3><p>开始时，修改内核以跳转到用户空间的警报处理程序，这将导致<code>test0</code>打印&quot;alarm!&quot;。目前不必担心&quot;alarm!&quot;输出后会发生什么；如果你的程序在打印&quot;alarm!&quot;后崩溃，这没关系。以下是一些提示：</p><ul><li><p>你需要修改<code>Makefile</code>，使<code>alarmtest.c</code>被编译为xv6用户程序。</p></li><li><p>在<code>user/user.h</code>中正确的声明是：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sigalarm</span><span class="token punctuation">(</span><span class="token keyword">int</span> ticks<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sigreturn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>更新<code>user/usys.pl</code>（生成<code>user/usys.S</code>）、<code>kernel/syscall.h</code>和<code>kernel/syscall.c</code>，以允许<code>alarmtest</code>调用<code>sigalarm</code>和<code>sigreturn</code>系统调用。</p></li><li><p>目前，你的<code>sys_sigreturn</code>应该只返回0。</p></li><li><p>你的<code>sys_sigalarm()</code>应该在<code>proc</code>结构（在<code>kernel/proc.h</code>中）中存储警报间隔和处理函数指针。</p></li><li><p>你需要跟踪自上次调用（或剩余直到下次调用）进程的警报处理程序以来经过了多少个<code>ticks</code>；你也需要在<code>struct proc</code>中为此添加一个新字段。你可以在<code>proc.c</code>中的<code>allocproc()</code>中初始化<code>proc</code>字段。</p></li><li><p>每个<code>tick</code>，硬件时钟强制中断，这在<code>kernel/trap.c</code>中的<code>usertrap()</code>中处理。</p></li><li><p>你只希望在有定时器中断时操作进程的警报<code>ticks</code>；你需要类似</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span>which_dev <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>只有在进程有未完成的定时器时才调用警报函数。注意用户警报函数的地址可能是0（例如，在<code>user/alarmtest.asm</code>中，<code>periodic</code>位于地址0）。</p></li><li><p>你需要修改<code>usertrap()</code>，以便当进程的警报间隔到期时，用户进程执行处理函数。当RISC-V上的陷阱返回到用户空间时，决定用户空间代码恢复执行的指令地址是什么？</p></li><li><p>如果你告诉<code>qemu</code>只使用一个CPU，使用<code>gdb</code>查看陷阱会更容易，你可以通过运行</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>make CPUS<span class="token operator">=</span><span class="token number">1</span> qemu<span class="token operator">-</span>gdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果你成功了，<code>alarmtest</code>会打印&quot;alarm!&quot;。</p></li></ul><h3 id="test1-test2-test3-resume-interrupted-code" tabindex="-1"><a class="header-anchor" href="#test1-test2-test3-resume-interrupted-code"><span>test1/test2()/test3(): resume interrupted code</span></a></h3><p>很有可能在打印出 &quot;alarm!&quot; 后，<code>alarmtest</code> 在 <code>test0 </code>或 <code>test1</code> 中崩溃，或者 <code>alarmtest</code>（最终）打印出 &quot;test1 failed&quot;，或者 <code>alarmtest</code> 退出而没有打印 &quot;test1 passed&quot;。要修复这个问题，你必须确保当报警处理程序完成后，控制权返回到用户程序最初被定时器中断打断的那条指令。你必须确保寄存器内容恢复到中断发生时的值，以便用户程序在报警后可以不受干扰地继续执行。最后，你应该在每次报警触发后“重新设置”报警计数器，以便处理程序可以定期被调用。</p><p>作为起点，我们为你做了一个设计决策：用户报警处理程序在完成后需要调用<code>sigreturn</code>系统调用。可以查看 <code>alarmtest.c </code>中的 <code>periodic </code>函数作为一个例子。这意味着你可以在<code>usertrap</code>和 <code>sys_sigreturn </code>中添加代码，协同工作，使得用户进程在处理完报警后能够正确恢复。</p><p>一些提示：</p><ul><li>你的解决方案将需要保存和恢复寄存器——你需要保存和恢复哪些寄存器才能正确恢复被中断的代码？（提示：将会是很多）。</li><li>当定时器触发时，让 <code>usertrap</code> 在 <code>struct proc</code> 中保存足够的状态，以便 <code>sigreturn</code> 能够正确返回到被中断的用户代码。</li><li>防止处理程序的递归调用——如果一个处理程序还没有返回，内核不应该再次调用它。<code>test2</code> 测试这一点。</li><li>确保恢复<code>a0</code>寄存器。<code>sigreturn</code> 是一个系统调用，其返回值存储在 <code>a0</code>中。</li></ul><p>一旦你通过了 <code>test0</code>、<code>test1</code>、<code>test2</code> 和 <code>test3</code>，运行 <code>usertests -q </code>以确保你没有破坏内核的其他部分。</p><h3 id="step1-1" tabindex="-1"><a class="header-anchor" href="#step1-1"><span>step1</span></a></h3><p>新增系统调用声明</p><p><code>user.h</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">int</span> <span class="token function">sigalarm</span><span class="token punctuation">(</span><span class="token keyword">int</span> ticks<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sigreturn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>usys.pl</code></p><div class="language-assembly line-numbers-mode" data-ext="assembly" data-title="assembly"><pre class="language-assembly"><code>...
entry(&quot;sigalarm&quot;);
entry(&quot;sigreturn&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>syscall.h</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_sigalarm</span>  <span class="token expression"><span class="token number">22</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_sigreturn</span> <span class="token expression"><span class="token number">23</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>syscall.c</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">extern</span> uint64 <span class="token function">sys_sigalarm</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> uint64 <span class="token function">sys_sigreturn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>SYS_sigalarm<span class="token punctuation">]</span>  sys_sigalarm<span class="token punctuation">,</span>
<span class="token punctuation">[</span>SYS_sigreturn<span class="token punctuation">]</span>  sys_sigreturn<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step2-1" tabindex="-1"><a class="header-anchor" href="#step2-1"><span>step2</span></a></h3><p>修改<code>proc.h</code>新增参数</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//for test0 </span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>alarm_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> alarm_interval<span class="token punctuation">;</span>
<span class="token keyword">int</span> alarm_ticks<span class="token punctuation">;</span>
<span class="token comment">//for test1</span>
<span class="token keyword">struct</span> <span class="token class-name">trapframe</span> alarm_context<span class="token punctuation">;</span>
<span class="token comment">//for test2</span>
<span class="token keyword">int</span> alarm_cnt<span class="token punctuation">;</span>
<span class="token comment">//for test3</span>
<span class="token keyword">int</span> alarm_a0<span class="token punctuation">;</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step3-1" tabindex="-1"><a class="header-anchor" href="#step3-1"><span>step3</span></a></h3><p>在内核中实现系统调用<code>sigalarm</code> 与<code>sigreturn</code>,实现在<code>sysproc.c</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>uint64 
<span class="token function">sys_sigalarm</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span>
  uint64 p<span class="token punctuation">;</span>
  <span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">argaddr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// for test0</span>
  <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>
  <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_interval <span class="token operator">=</span> n<span class="token punctuation">;</span>
  <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//for test2  </span>
  <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

uint64 
<span class="token function">sys_sigreturn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//for test1</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>trapframe<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_context<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trapframe</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//for test2</span>
  <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//for test3</span>
  <span class="token keyword">return</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_a0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step4-1" tabindex="-1"><a class="header-anchor" href="#step4-1"><span>step4</span></a></h3><p>在 <code>trap.c</code>中增加计时器中断回调</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>  <span class="token keyword">if</span><span class="token punctuation">(</span>which_dev <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_interval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_ticks<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_cnt<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_ticks <span class="token operator">&gt;=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//for test0</span>
        <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>epc <span class="token operator">=</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_handler<span class="token punctuation">;</span>
        <span class="token comment">//for test1</span>
        <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_context<span class="token punctuation">,</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>trapframe<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trapframe</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//for test3</span>
        <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_a0 <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a0<span class="token punctuation">;</span>
        <span class="token comment">//for test2</span>
        <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>alarm_cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function E($,j){const a=c("ExternalLinkIcon");return o(),i("div",null,[m,n("h2",v,[n("a",b,[n("span",null,[s("RISC-V assembly ("),n("a",h,[s("easy"),e(a)]),s(")")])])]),g,n("p",null,[s("理解一些 RISC-V 汇编语言将会很重要，你在6.1910（6.004）课程中已经接触过它。在你的xv6仓库中有一个文件名为"),f,s("。"),y,s("编译它，并且会产生一个可阅读的汇编版本的程序在"),_,s("中。阅读"),x,s("中的g，f和main方法。RISC-V的说明手册在 "),n("a",w,[s("参考页面"),e(a)]),s("上。以下是你应该回答的一些问题（将答案保存在文件answers-traps.txt中）：")]),n("ul",null,[q,n("li",null,[S,n("p",null,[s("输出是什么？"),n("a",P,[s("这是一个 ASCII 表"),e(a)]),s(" 映射字节与字符。")]),C,n("p",null,[n("a",N,[s("以下是对小端序和大端序的描述"),e(a)]),s(" ，以及"),n("a",D,[s("一个更富想象力的描述"),e(a)]),s("。")]),R]),T]),n("h2",U,[n("a",I,[n("span",null,[s("Backtrace ("),n("a",O,[s("moderate"),e(a)]),s(")")])])]),V,n("h2",L,[n("a",z,[n("span",null,[s("Alarm ("),n("a",G,[s("hard"),e(a)]),s(")")])])]),B])}const A=p(k,[["render",E],["__file","6-lab-traps.html.vue"]]),W=JSON.parse(`{"path":"/cs-basics/os/6.S081/labs/6-lab-traps.html","title":"Lab 4:traps","lang":"zh-CN","frontmatter":{"icon":"code-bold","date":"2024-06-29T00:00:00.000Z","category":["操作系统"],"tag":["MIT","XV6","riscv","C"],"description":"Lab 4:traps 本实验探索系统调用如何实现陷入。你将使用栈先进行一些热身训练，之后你将实现一个用户计陷入处理的例子。 注意 在你开始编码之前，请阅读 xv6 书的第四章以及相关文件： kernel/trampoline.S: 涉及从用户空间切换到内核空间以及返回的汇编过程。 kernel/trap.c: 处理所有中断的代码。 开始实验前，请切换...","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/labs/6-lab-traps.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"Lab 4:traps"}],["meta",{"property":"og:description","content":"Lab 4:traps 本实验探索系统调用如何实现陷入。你将使用栈先进行一些热身训练，之后你将实现一个用户计陷入处理的例子。 注意 在你开始编码之前，请阅读 xv6 书的第四章以及相关文件： kernel/trampoline.S: 涉及从用户空间切换到内核空间以及返回的汇编过程。 kernel/trap.c: 处理所有中断的代码。 开始实验前，请切换..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-10T07:17:07.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:published_time","content":"2024-06-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-10T07:17:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab 4:traps\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-10T07:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"RISC-V assembly (easy)","slug":"risc-v-assembly-easy","link":"#risc-v-assembly-easy","children":[{"level":3,"title":"实验要求翻译","slug":"实验要求翻译","link":"#实验要求翻译","children":[]}]},{"level":2,"title":"Backtrace (moderate)","slug":"backtrace-moderate","link":"#backtrace-moderate","children":[{"level":3,"title":"实验要求翻译","slug":"实验要求翻译-1","link":"#实验要求翻译-1","children":[]},{"level":3,"title":"实验操作","slug":"实验操作","link":"#实验操作","children":[]}]},{"level":2,"title":"知识补充(by ** **)","slug":"知识补充-by","link":"#知识补充-by","children":[]},{"level":2,"title":"Alarm (hard)","slug":"alarm-hard","link":"#alarm-hard","children":[{"level":3,"title":"test0: invoke handler","slug":"test0-invoke-handler","link":"#test0-invoke-handler","children":[]},{"level":3,"title":"test1/test2()/test3(): resume interrupted code","slug":"test1-test2-test3-resume-interrupted-code","link":"#test1-test2-test3-resume-interrupted-code","children":[]},{"level":3,"title":"step1","slug":"step1-1","link":"#step1-1","children":[]},{"level":3,"title":"step2","slug":"step2-1","link":"#step2-1","children":[]},{"level":3,"title":"step3","slug":"step3-1","link":"#step3-1","children":[]},{"level":3,"title":"step4","slug":"step4-1","link":"#step4-1","children":[]}]}],"git":{"createdTime":1720594837000,"updatedTime":1720595827000,"contributors":[{"name":"JiaHao","email":"jh_personal@163.com","commits":3}]},"readingTime":{"minutes":11.72,"words":3516},"filePathRelative":"cs-basics/os/6.S081/labs/6-lab-traps.md","localizedDate":"2024年6月29日","excerpt":"\\n<p>本实验探索系统调用如何实现陷入。你将使用栈先进行一些热身训练，之后你将实现一个用户计陷入处理的例子。</p>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>在你开始编码之前，请阅读 xv6 书的第四章以及相关文件：</p>\\n<ul>\\n<li><code>kernel/trampoline.S</code>: 涉及从用户空间切换到内核空间以及返回的汇编过程。</li>\\n<li><code>kernel/trap.c</code>: 处理所有中断的代码。</li>\\n</ul>\\n</div>","autoDesc":true}`);export{A as comp,W as data};
