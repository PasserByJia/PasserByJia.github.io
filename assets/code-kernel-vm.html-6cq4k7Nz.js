import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,d as e}from"./app-BrSDEhBN.js";const t={},p=e(`<h1 id="xv6源码精读-vm-c" tabindex="-1"><a class="header-anchor" href="#xv6源码精读-vm-c"><span>XV6源码精读 -- vm.c</span></a></h1><h2 id="uvmcreate" tabindex="-1"><a class="header-anchor" href="#uvmcreate"><span>uvmcreate()</span></a></h2><p>在操作系统中，每个进程都有自己的页表，用于管理其虚拟地址空间。当操作系统创建新的进程时，需要为该进程分配一个新的页表。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 创建一个空的用户页表</span>
<span class="token comment">// 如果没有内存了就返回0</span>
<span class="token class-name">pagetable_t</span>
<span class="token function">uvmcreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">;</span>
  pagetable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">)</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pagetable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//将此页表都填充成0</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> pagetable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>memset</code> 函数将分配的物理页的内容初始化为0。这样做是为了确保新分配的页表中的所有条目都是无效的，即没有任何虚拟地址被映射到物理地址。</p><h2 id="freewalk-pagetable-t-pagetable" tabindex="-1"><a class="header-anchor" href="#freewalk-pagetable-t-pagetable"><span>freewalk(pagetable_t pagetable)</span></a></h2><p>此函数的作用是递归释放一个页表及其所有子页表所占用的内存空间。当一个进程终止时，或者内核需要释放一个进程的虚拟地址空间时，需要将该进程的页表所占用的内存释放回内存池，以便其他进程或内核可以重新利用这些内存空间。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 递归释放页表页。</span>
<span class="token comment">// 所有叶子映射必须已经被移除。</span>
<span class="token keyword">void</span>
<span class="token function">freewalk</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 一个页表中有 2^9 = 512 个页表项。</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">pte_t</span> pte <span class="token operator">=</span> pagetable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> <span class="token punctuation">(</span>PTE_R<span class="token operator">|</span>PTE_W<span class="token operator">|</span>PTE_X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// 这个页表项指向一个更低级别的页表。</span>
      uint64 child <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">freewalk</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">)</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
      pagetable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;freewalk: leaf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//kfree回收 kalloc分配的物理内存。</span>
  <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pagetable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>(pte &amp; PTE_V)</code>: 这部分检查页表项是否有效。在 xv6 中，<code>PTE_V</code> 表示页表项有效，即该条目对应的虚拟地址是有效的。如果 <code>pte &amp; PTE_V</code> 的结果为非零值，则表示该页表项是有效的。</li><li><code>(pte &amp; (PTE_R|PTE_W|PTE_X))</code>: 这部分检查页表项是否指向一个更低级别的页表（非叶子节点）。在 xv6 中，<code>PTE_R</code>、<code>PTE_W</code> 和 <code>PTE_X</code> 分别表示页面是否可读、可写和可执行。如果 <code>pte &amp; (PTE_R|PTE_W|PTE_X)</code> 的结果为非零值，则表示该页表项指向的是一个物理页面，而不是另一个页表。因此，该条件检查了页表项既有效又不是叶子节点。</li></ul>`,9),c=[p];function o(l,i){return a(),s("div",null,c)}const k=n(t,[["render",o],["__file","code-kernel-vm.html.vue"]]),d=JSON.parse(`{"path":"/cs-basics/os/6.S081/xv6/code-kernel-vm.html","title":"XV6源码精读 -- vm.c","lang":"zh-CN","frontmatter":{"icon":"ph:file-code","date":"2024-05-10T00:00:00.000Z","category":["操作系统"],"tag":["MIT","XV6","riscv","C"],"description":"XV6源码精读 -- vm.c uvmcreate() 在操作系统中，每个进程都有自己的页表，用于管理其虚拟地址空间。当操作系统创建新的进程时，需要为该进程分配一个新的页表。 使用 memset 函数将分配的物理页的内容初始化为0。这样做是为了确保新分配的页表中的所有条目都是无效的，即没有任何虚拟地址被映射到物理地址。 freewalk(pagetab...","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/xv6/code-kernel-vm.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"XV6源码精读 -- vm.c"}],["meta",{"property":"og:description","content":"XV6源码精读 -- vm.c uvmcreate() 在操作系统中，每个进程都有自己的页表，用于管理其虚拟地址空间。当操作系统创建新的进程时，需要为该进程分配一个新的页表。 使用 memset 函数将分配的物理页的内容初始化为0。这样做是为了确保新分配的页表中的所有条目都是无效的，即没有任何虚拟地址被映射到物理地址。 freewalk(pagetab..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-10T16:05:59.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:published_time","content":"2024-05-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-10T16:05:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"XV6源码精读 -- vm.c\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-10T16:05:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"uvmcreate()","slug":"uvmcreate","link":"#uvmcreate","children":[]},{"level":2,"title":"freewalk(pagetable_t pagetable)","slug":"freewalk-pagetable-t-pagetable","link":"#freewalk-pagetable-t-pagetable","children":[]}],"git":{"createdTime":1715305214000,"updatedTime":1715357159000,"contributors":[{"name":"JH","email":"jh_personal@163.com","commits":1}]},"readingTime":{"minutes":1.93,"words":578},"filePathRelative":"cs-basics/os/6.S081/xv6/code-kernel-vm.md","localizedDate":"2024年5月10日","excerpt":"\\n<h2>uvmcreate()</h2>\\n<p>在操作系统中，每个进程都有自己的页表，用于管理其虚拟地址空间。当操作系统创建新的进程时，需要为该进程分配一个新的页表。</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">// 创建一个空的用户页表</span>\\n<span class=\\"token comment\\">// 如果没有内存了就返回0</span>\\n<span class=\\"token class-name\\">pagetable_t</span>\\n<span class=\\"token function\\">uvmcreate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">pagetable_t</span> pagetable<span class=\\"token punctuation\\">;</span>\\n  pagetable <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pagetable_t</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">kalloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>pagetable <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//将此页表都填充成0</span>\\n  <span class=\\"token function\\">memset</span><span class=\\"token punctuation\\">(</span>pagetable<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> PGSIZE<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> pagetable<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
