import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,e as s,b as l,d as a}from"./app-Hrbkdq7n.js";const i={},u=a(`<h1 id="lab6-copy-on-write-fork-for-xv6" tabindex="-1"><a class="header-anchor" href="#lab6-copy-on-write-fork-for-xv6"><span>Lab6:Copy-on-Write Fork for xv6</span></a></h1><p>虚拟内存提供了一层间接性：内核可以通过将页表项（PTE）标记为无效或只读来拦截内存引用，从而引发页错误，并通过修改 PTE 来改变地址的含义。计算机系统中有一种说法，任何系统问题都可以通过一层间接性来解决。惰性分配实验室提供了一个例子。本实验将探索另一个例子：写时复制（Copy-on-Write, COW）的 fork。</p><p>要开始实验，切换到 cow 分支：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch 
$ <span class="token function">git</span> checkout cow 
$ <span class="token function">make</span> clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>xv6 中的 <code>fork()</code> 系统调用会将父进程的所有用户空间内存复制到子进程中。如果父进程很大，复制过程可能会花费很长时间。更糟糕的是，这种工作通常是浪费的；例如，子进程在 <code>fork()</code> 后执行 <code>exec()</code> 会导致子进程丢弃复制的内存，可能根本没有使用其中的大部分内容。另一方面，如果父进程和子进程都使用某个页面，并且其中一个或两个进程对其进行写操作，那么确实需要复制该页面。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>写时复制（COW）<code>fork()</code> 的目标是推迟为子进程分配和复制物理内存页面，直到真正需要时才进行复制（如果有的话）。</p><p>COW <code>fork()</code> 仅为子进程创建一个页表，其中的用户内存 PTE 指向父进程的物理页面。COW <code>fork()</code> 将父进程和子进程中的所有用户 PTE 标记为不可写。当任一进程尝试写入这些 COW 页面时，CPU 将强制引发页错误。内核的页错误处理程序会检测到这种情况，为引发错误的进程分配一个物理内存页面，将原始页面复制到新页面中，并修改引发错误的进程中的相关 PTE，使其指向新页面，这次将 PTE 标记为可写。当页错误处理程序返回时，用户进程将能够写入其页面的副本。</p><p>COW <code>fork()</code> 使得释放实现用户内存的物理页面变得稍微复杂一些。一个给定的物理页面可能被多个进程的页表引用，只有在最后一个引用消失时才应该被释放。</p>`,10),r={id:"implement-copy-on-write-hard",tabindex:"-1"},k={class:"header-anchor",href:"#implement-copy-on-write-hard"},d={href:"https://pdos.csail.mit.edu/6.S081/2020/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>你的任务是在 xv6 内核中实现写时复制（Copy-on-Write, COW）的 <code>fork</code>。如果你修改后的内核能够成功执行 <code>cowtest</code> 和 <code>usertests</code> 程序，那么你就完成了任务。</p><p>为了帮助你测试实现，我们提供了一个名为 <code>cowtest</code> 的 xv6 程序（源代码在 <code>user/cowtest.c</code> 中）。<code>cowtest</code> 运行各种测试，但在未修改的 xv6 上，即使是第一个测试也会失败。因此，最初你会看到：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ cowtest
simple: fork<span class="token punctuation">(</span><span class="token punctuation">)</span> failed
$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“simple”测试分配了超过一半的可用物理内存，然后调用 <code>fork()</code>。由于没有足够的空闲物理内存来为子进程提供父进程内存的完整副本，<code>fork</code> 失败了。</p><p>当你完成后，你的内核应该通过 <code>cowtest</code> 和 <code>usertests</code> 中的所有测试。即：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ cowtest
simple: ok
simple: ok
three: zombie<span class="token operator">!</span>
ok
three: zombie<span class="token operator">!</span>
ok
three: zombie<span class="token operator">!</span>
ok
file: ok
ALL COW TESTS PASSED
$ usertests
<span class="token punctuation">..</span>.
ALL TESTS PASSED
$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现计划" tabindex="-1"><a class="header-anchor" href="#实现计划"><span>实现计划</span></a></h3><ol><li><p><strong>修改 <code>uvmcopy()</code></strong><br> 将父进程的物理页面映射到子进程，而不是分配新页面。清除子进程和父进程 PTE 中的 <code>PTE_W</code> 标志。</p></li><li><p><strong>修改 <code>usertrap()</code></strong><br> 识别页错误。当发生 COW 页错误时，使用 <code>kalloc()</code> 分配一个新页面，将旧页面复制到新页面，并在 PTE 中安装新页面，同时设置 <code>PTE_W</code> 标志。</p></li><li><p><strong>确保物理页面在最后一个 PTE 引用消失时被释放</strong><br> 但在此之前不能释放。一种好的方法是为每个物理页面维护一个“引用计数”，记录引用该页面的用户页表数量。当 <code>kalloc()</code> 分配页面时，将页面的引用计数设置为 1。当 <code>fork</code> 导致子进程共享页面时，增加页面的引用计数；当任何进程从其页表中删除页面时，减少页面的引用计数。只有当页面的引用计数为零时，<code>kfree()</code> 才应将页面放回空闲列表。可以将这些计数存储在一个固定大小的整数数组中。你需要设计一种方案来确定数组的索引和大小。例如，可以使用页面的物理地址除以 4096 作为数组的索引，并将数组的大小设置为 <code>kinit()</code> 在 <code>kalloc.c</code> 中放置在空闲列表中的任何页面的最高物理地址。</p></li><li><p><strong>修改 <code>copyout()</code></strong><br> 当遇到 COW 页面时，使用与页错误相同的方案。</p></li></ol><h3 id="提示" tabindex="-1"><a class="header-anchor" href="#提示"><span>提示</span></a></h3><ul><li><strong>lazy allocate 实验</strong> 可能已经让你熟悉了与写时复制相关的 xv6 内核代码。但是，你不应基于惰性分配解决方案来完成本实验；相反，请按照上述指示从全新的 xv6 副本开始。</li><li>记录每个 PTE 是否为 COW 映射可能很有用。你可以使用 RISC-V PTE 中的 RSW（保留给软件）位来实现这一点。</li><li><code>usertests</code> 探索了 <code>cowtest</code> 未测试的场景，因此不要忘记检查所有测试是否都通过了。</li><li>一些有用的宏和页表标志定义位于 <code>kernel/riscv.h</code> 的末尾。</li><li>如果发生 COW 页错误且没有空闲内存，则应终止该进程。</li></ul><h3 id="实验步骤" tabindex="-1"><a class="header-anchor" href="#实验步骤"><span>实验步骤</span></a></h3><p>RISC-V 的 PTE 是一个 64 位的值，其位布局如下：</p><table><thead><tr><th>位范围</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>63:54</td><td>PPN[2]</td><td>物理页号的高 10 位（指向下一级页表或页框）</td></tr><tr><td>53:44</td><td>PPN[1]</td><td>物理页号的中 10 位</td></tr><tr><td>43:34</td><td>PPN[0]</td><td>物理页号的低 10 位</td></tr><tr><td>33:10</td><td>Reserved</td><td>保留位</td></tr><tr><td>9:8</td><td>RSW</td><td>保留给软件使用的位（<code>PTE_RSW</code>）</td></tr><tr><td>7</td><td>D</td><td>Dirty（脏位，表示页面是否被修改过）</td></tr><tr><td>6</td><td>A</td><td>Accessed（访问位，表示页面是否被访问过）</td></tr><tr><td>5</td><td>G</td><td>Global（全局位，表示页面是否全局共享）</td></tr><tr><td>4</td><td>U</td><td>User（用户位，表示页面是否可被用户模式访问）</td></tr><tr><td>3</td><td>X</td><td>Executable（可执行位）</td></tr><tr><td>2</td><td>W</td><td>Writable（可写位）</td></tr><tr><td>1</td><td>R</td><td>Readable（可读位）</td></tr><tr><td>0</td><td>V</td><td>Valid（有效位）</td></tr><tr><td>修改 <code>kernel/riscv.h</code></td><td></td><td></td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_X</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_U</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> </span><span class="token comment">// 1 -&gt; user can access</span></span>
<span class="token comment">//新增行</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTE_COW</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> </span><span class="token comment">// copy on write flag</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>kernel/vm.c</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//修改 uvmcopy 方法</span>

<span class="token keyword">int</span>
<span class="token function">uvmcopy</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> old<span class="token punctuation">,</span> <span class="token class-name">pagetable_t</span> new<span class="token punctuation">,</span> uint64 sz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte<span class="token punctuation">;</span>
  uint64 pa<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
  uint flags<span class="token punctuation">;</span>
  <span class="token comment">//char *mem;</span>
  
  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i <span class="token operator">+=</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;uvmcopy: pte should exist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;uvmcopy: page not present&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token operator">~</span>PTE_W<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_COW<span class="token punctuation">;</span> <span class="token comment">//清除写权限，设置COW标志</span>
    flags <span class="token operator">=</span> <span class="token function">PTE_FLAGS</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提取pte的标志位</span>
    <span class="token comment">//不重新分配内存，而是对old 页表的物理地址进行映射</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> i<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> flags<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">inc_ref</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// if((mem = kalloc()) == 0)</span>
    <span class="token comment">//   goto err;</span>
    <span class="token comment">// memmove(mem, (char*)pa, PGSIZE);</span>
    <span class="token comment">// if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){</span>
    <span class="token comment">//   kfree(mem);</span>
    <span class="token comment">//   goto err;</span>
    <span class="token comment">// }</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

 err<span class="token operator">:</span>
  <span class="token function">uvmunmap</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">/</span> PGSIZE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//增加方法 用于判断当前页是否是 cow page </span>
<span class="token keyword">int</span> <span class="token function">is_cow_page</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pg<span class="token punctuation">,</span> uint64 va<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//如果虚拟地址大于最大虚拟地址说明是非法地址</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>va <span class="token operator">&gt;=</span> MAXVA<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//虚拟地址向下取整  </span>
  va <span class="token operator">=</span> <span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//通过walk函数获取虚拟地址对应的pte</span>
  <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>pg<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pte <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_U<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回是否是cow </span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_COW<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

  
<span class="token comment">//对cow page 进行内存复制</span>
<span class="token keyword">int</span> <span class="token function">cow_alloc</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span> pg<span class="token punctuation">,</span>uint64 va<span class="token punctuation">)</span><span class="token punctuation">{</span>
  va <span class="token operator">=</span> <span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">pte_t</span> <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span>pg<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  uint64 pa <span class="token operator">=</span> <span class="token function">PTE2PA</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//获取原始页表的标志位信息</span>
  <span class="token keyword">int</span> flags <span class="token operator">=</span>  <span class="token function">PTE_FLAGS</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 复制内存信息</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>mem <span class="token operator">=</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pa<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 解除对旧物理地址的映射，</span>
  <span class="token function">uvmunmap</span><span class="token punctuation">(</span>pg<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 清除PTE_COW 标志位，设置可写标志</span>
  flags <span class="token operator">=</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token operator">~</span>PTE_COW<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_W<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span>pg<span class="token punctuation">,</span> va<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>mem<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">kfree</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>kernel/trap.c</code> 中的<code>usertrap(void)</code>方法。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>which_dev <span class="token operator">=</span> <span class="token function">devintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ok</span>
  <span class="token comment">//=====================add code begin=============================</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">15</span> <span class="token operator">||</span> <span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//如果是page fault</span>
    uint64 va <span class="token operator">=</span> <span class="token function">r_stval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_cow_page</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span>va<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cow_alloc</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span>va<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p<span class="token operator">-&gt;</span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;usertrap(): cow unexpected scause %p pid=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;            sepc=%p stval=%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">r_sepc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r_stval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      p<span class="token operator">-&gt;</span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token comment">//=====================add code end=============================</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;usertrap(): unexpected scause %p pid=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">r_scause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;            sepc=%p stval=%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">r_sepc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r_stval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>kernel/kalloc.c</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">extern</span> <span class="token keyword">char</span> end<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// first address after kernel.</span>
                   <span class="token comment">// defined by kernel.ld</span>
                   
<span class="token keyword">int</span> refcount<span class="token punctuation">[</span><span class="token number">32768</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 此数组用于记录，物理页被引用的次数</span>

<span class="token keyword">struct</span> <span class="token class-name">run</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">run</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">//用于计算物理页的索引值</span>
<span class="token keyword">int</span> <span class="token function">page_index</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> res  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>pa <span class="token operator">-</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> PGSIZE<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> res<span class="token operator">&gt;=</span><span class="token number">32768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;page_index: invalid pa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//对物理页引用数进行增加操作</span>
<span class="token keyword">int</span> <span class="token function">inc_ref</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">page_index</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>
  refcount<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> refcount<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//对物理页引用数进行减少操作</span>
<span class="token keyword">int</span> <span class="token function">dec_ref</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">page_index</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>
  refcount<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> refcount<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">void</span>
<span class="token function">kfree</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pa<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">run</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>
  <span class="token comment">//如果物理页引用数大于1 则不释放此页</span>
  <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">page_index</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>refcount<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dec_ref</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//如果物理页的引用数为1 则需要将引用数减1，并执行释放物理页操作。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>refcount<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">dec_ref</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>pa <span class="token operator">%</span> PGSIZE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pa <span class="token operator">&lt;</span> end <span class="token operator">||</span> <span class="token punctuation">(</span>uint64<span class="token punctuation">)</span>pa <span class="token operator">&gt;=</span> PHYSTOP<span class="token punctuation">)</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;kfree&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token comment">// Fill with junk to catch dangling refs.</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>pa<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


<span class="token keyword">void</span> <span class="token operator">*</span>
<span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">run</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>
  
  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmem<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  r <span class="token operator">=</span> kmem<span class="token punctuation">.</span>freelist<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    kmem<span class="token punctuation">.</span>freelist <span class="token operator">=</span> r<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmem<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>r<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fill with junk</span>
    <span class="token function">inc_ref</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配物理页的时候引用加1</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>r<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>kernel/defs.h</code>中增加刚刚添加的四个方法的声明</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// kalloc.c</span>
<span class="token keyword">int</span>             <span class="token function">inc_ref</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>             <span class="token function">dec_ref</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// vm.c</span>
<span class="token keyword">int</span>             <span class="token function">is_cow_page</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>             <span class="token function">cow_alloc</span><span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">,</span> uint64<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function m(b,f){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("h2",r,[n("a",k,[n("span",null,[s("Implement copy-on write("),n("a",d,[s("hard"),l(t)]),s(")")])])]),v])}const h=p(i,[["render",m],["__file","8-Copy-on-Write-Fork.html.vue"]]),w=JSON.parse(`{"path":"/cs-basics/os/6.S081/labs/8-Copy-on-Write-Fork.html","title":"Lab6:Copy-on-Write Fork for xv6","lang":"zh-CN","frontmatter":{"icon":"code-bold","date":"2025-01-15T00:00:00.000Z","category":["操作系统"],"tags":["MIT","XV6","riscv","C"],"description":"Lab6:Copy-on-Write Fork for xv6 虚拟内存提供了一层间接性：内核可以通过将页表项（PTE）标记为无效或只读来拦截内存引用，从而引发页错误，并通过修改 PTE 来改变地址的含义。计算机系统中有一种说法，任何系统问题都可以通过一层间接性来解决。惰性分配实验室提供了一个例子。本实验将探索另一个例子：写时复制（Copy-on-Wr...","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/labs/8-Copy-on-Write-Fork.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"Lab6:Copy-on-Write Fork for xv6"}],["meta",{"property":"og:description","content":"Lab6:Copy-on-Write Fork for xv6 虚拟内存提供了一层间接性：内核可以通过将页表项（PTE）标记为无效或只读来拦截内存引用，从而引发页错误，并通过修改 PTE 来改变地址的含义。计算机系统中有一种说法，任何系统问题都可以通过一层间接性来解决。惰性分配实验室提供了一个例子。本实验将探索另一个例子：写时复制（Copy-on-Wr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T07:15:39.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:published_time","content":"2025-01-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T07:15:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab6:Copy-on-Write Fork for xv6\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-15T07:15:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"Implement copy-on write(hard)","slug":"implement-copy-on-write-hard","link":"#implement-copy-on-write-hard","children":[{"level":3,"title":"实现计划","slug":"实现计划","link":"#实现计划","children":[]},{"level":3,"title":"提示","slug":"提示","link":"#提示","children":[]},{"level":3,"title":"实验步骤","slug":"实验步骤","link":"#实验步骤","children":[]}]}],"git":{"createdTime":1736925339000,"updatedTime":1736925339000,"contributors":[{"name":"jh_personal@163.com","email":"jh_personal@163.com","commits":1}]},"readingTime":{"minutes":8.07,"words":2420},"filePathRelative":"cs-basics/os/6.S081/labs/8-Copy-on-Write-Fork.md","localizedDate":"2025年1月15日","excerpt":"\\n<p>虚拟内存提供了一层间接性：内核可以通过将页表项（PTE）标记为无效或只读来拦截内存引用，从而引发页错误，并通过修改 PTE 来改变地址的含义。计算机系统中有一种说法，任何系统问题都可以通过一层间接性来解决。惰性分配实验室提供了一个例子。本实验将探索另一个例子：写时复制（Copy-on-Write, COW）的 fork。</p>\\n<p>要开始实验，切换到 cow 分支：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ <span class=\\"token function\\">git</span> fetch \\n$ <span class=\\"token function\\">git</span> checkout cow \\n$ <span class=\\"token function\\">make</span> clean\\n</code></pre></div>","autoDesc":true}`);export{h as comp,w as data};
