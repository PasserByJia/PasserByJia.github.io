import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as i,c,a as e,d as t,b as o,e as a}from"./app-C6ih8L5S.js";const r={},p=a(`<h1 id="lab-page-tables" tabindex="-1"><a class="header-anchor" href="#lab-page-tables"><span>Lab: page tables</span></a></h1><p>在这个实验中，你将探索页面表并修改它们以加速特定的系统调用，并检测哪些页面已被访问。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在你开始编码之前，请阅读 xv6 书的第三章以及相关文件：</p><ul><li>kernel/memlayout.h，其中包含内存布局的信息。</li><li>kernel/vm.c，其中包含大部分虚拟内存（VM）代码。</li><li>kernel/kalloc.c，其中包含分配和释放物理内存的代码。 同时，参考 RISC-V 特权架构手册可能也会有所帮助。</li></ul></div><p>要开始实验，请切换到 pgtbl 分支：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch 
$ <span class="token function">git</span> checkout pgtbl 
$ <span class="token function">make</span> clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),d={id:"speed-up-system-calls-easy",tabindex:"-1"},m={class:"header-anchor",href:"#speed-up-system-calls-easy"},h={href:"https://pdos.csail.mit.edu/6.S081/2023/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},u=a('<h3 id="实验要求翻译" tabindex="-1"><a class="header-anchor" href="#实验要求翻译"><span>实验要求翻译</span></a></h3><p>一些操作系统（例如Linux）通过在用户空间和内核之间共享一块只读空间来加速某些特定的系统调用。这消除了执行这些系统调用时需要内核交叉的需求。为了帮助你学习如何将映射插入到页面表中，你的第一个任务是为 xv6 中的 getpid() 系统调用实现这种优化。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>在每个进程创建时，在 USYSCALL（在 memlayout.h 中定义的一个虚拟地址）处映射一个只读页面。在这个页面的开头，存储一个 struct usyscall（也在 memlayout.h 中定义），并将其初始化为存储当前进程的 PID。在这个实验中，ugetpid() 已经在用户空间中提供，并将自动使用 USYSCALL 映射。如果运行 pgtbltest 时 ugetpid 测试用例通过，则你将获得此实验的完整学分。</p></div><p>一些提示：</p><ul><li>你可以在 kernel/proc.c 中的 proc_pagetable() 中执行映射。</li><li>选择允许用户空间只读取页面的权限位。</li><li>你可能会发现 mappages() 是一个有用的实用程序。</li><li>不要忘记在 allocproc() 中分配和初始化页面。 确保在 freeproc() 中释放页面。</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>ChatGPT 你还可以使用共享页面加速哪些其他 xv6 系统调用？请解释一下。</p></div>',6);function b(g,y){const l=n("ExternalLinkIcon");return i(),c("div",null,[p,e("h2",d,[e("a",m,[e("span",null,[t("Speed up system calls ("),e("a",h,[t("easy"),o(l)]),t(")")])])]),u])}const k=s(r,[["render",b],["__file","5-lab-page-tables.html.vue"]]),f=JSON.parse(`{"path":"/cs-basics/os/6.S081/labs/5-lab-page-tables.html","title":"Lab: page tables","lang":"zh-CN","frontmatter":{"icon":"code-bold","date":"2024-05-07T00:00:00.000Z","category":["操作系统"],"tag":["MIT","XV6","riscv","C"],"description":"Lab: page tables 在这个实验中，你将探索页面表并修改它们以加速特定的系统调用，并检测哪些页面已被访问。 注意 在你开始编码之前，请阅读 xv6 书的第三章以及相关文件： kernel/memlayout.h，其中包含内存布局的信息。 kernel/vm.c，其中包含大部分虚拟内存（VM）代码。 kernel/kalloc.c，其中包含分...","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/labs/5-lab-page-tables.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"Lab: page tables"}],["meta",{"property":"og:description","content":"Lab: page tables 在这个实验中，你将探索页面表并修改它们以加速特定的系统调用，并检测哪些页面已被访问。 注意 在你开始编码之前，请阅读 xv6 书的第三章以及相关文件： kernel/memlayout.h，其中包含内存布局的信息。 kernel/vm.c，其中包含大部分虚拟内存（VM）代码。 kernel/kalloc.c，其中包含分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T16:31:31.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:published_time","content":"2024-05-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T16:31:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab: page tables\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-08T16:31:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Speed up system calls (easy)","slug":"speed-up-system-calls-easy","link":"#speed-up-system-calls-easy","children":[{"level":3,"title":"实验要求翻译","slug":"实验要求翻译","link":"#实验要求翻译","children":[]}]}],"git":{"createdTime":1715185891000,"updatedTime":1715185891000,"contributors":[{"name":"JH","email":"jh_personal@163.com","commits":1}]},"readingTime":{"minutes":1.69,"words":507},"filePathRelative":"cs-basics/os/6.S081/labs/5-lab-page-tables.md","localizedDate":"2024年5月7日","excerpt":"\\n<p>在这个实验中，你将探索页面表并修改它们以加速特定的系统调用，并检测哪些页面已被访问。</p>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>在你开始编码之前，请阅读 xv6 书的第三章以及相关文件：</p>\\n<ul>\\n<li>kernel/memlayout.h，其中包含内存布局的信息。</li>\\n<li>kernel/vm.c，其中包含大部分虚拟内存（VM）代码。</li>\\n<li>kernel/kalloc.c，其中包含分配和释放物理内存的代码。 同时，参考 RISC-V 特权架构手册可能也会有所帮助。</li>\\n</ul>\\n</div>","autoDesc":true}`);export{k as comp,f as data};
