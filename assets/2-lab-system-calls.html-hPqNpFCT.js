import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,e as s,b as t,d as a}from"./app-CpgMGuxi.js";const i={},u=a(`<h1 id="lab-2-system-calls" tabindex="-1"><a class="header-anchor" href="#lab-2-system-calls"><span>Lab 2: System Calls</span></a></h1><p>在上一个实验中，你使用系统调用编写了一些实用程序。在这个实验中，你将向 xv6 添加一些新的系统调用，这将帮助你理解它们的工作原理，并让你接触到 xv6 内核的一些内部机制。在后续的实验中，你将添加更多的系统调用。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>开始编码之前，请阅读 xv6 书籍的第 2 章，以及第 4 章的第 4.3 节和第 4.4 节，并阅读相关的源文件：</p><ul><li>用户空间的系统调用代码 在 user/user.h 和 user/usys.pl 中。</li><li>内核空间的系统调用代码 在 kernel/syscall.h 和 kernel/syscall.c 中。</li><li>与进程相关的代码 在 kernel/proc.h 和 kernel/proc.c 中。</li></ul></div><p>开始实验，切换到 <code>syscall</code> 分支：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch
$ <span class="token function">git</span> checkout syscall
$ <span class="token function">make</span> clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你运行 <code>make grade</code>，你会看到评分脚本无法执行 <code>trace</code> 和 <code>sysinfotest</code>。你的任务是添加必要的系统调用和存根，使它们能够正常工作</p>`,6),r={id:"system-call-tracing-moderate",tabindex:"-1"},d={class:"header-anchor",href:"#system-call-tracing-moderate"},k={href:"https://pdos.csail.mit.edu/6.S081/2020/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="hint-container important"><p class="hint-container-title">重要</p><p>在这个任务中，你将添加一个系统调用跟踪功能，这可能会在你调试后续实验时有所帮助。你将创建一个新的 <code>trace</code> 系统调用，用于控制跟踪。它应该接受一个参数，一个整数“掩码”，其位指定要跟踪哪些系统调用。例如，要跟踪 <code>fork</code> 系统调用，程序调用 <code>trace(1 &lt;&lt; SYS_fork)</code>，其中 <code>SYS_fork</code> 是 <code>kernel/syscall.h</code> 中的系统调用号。你需要修改 xv6 内核，以便在每个系统调用即将返回时，如果系统调用号在掩码中设置，则打印一行。该行应包含进程 ID、系统调用的名称和返回值；你不需要打印系统调用参数。<code>trace</code> 系统调用应为调用它的进程及其随后派生的任何子进程启用跟踪，但不应影响其他进程。</p></div><p>我们提供了一个用户级程序 <code>trace</code>，它可以在启用跟踪的情况下运行另一个程序（参见 <code>user/trace.c</code>）。当你完成后，你应该看到类似以下的输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ trace <span class="token number">32</span> <span class="token function">grep</span> hello README
<span class="token number">3</span>: syscall <span class="token builtin class-name">read</span> -<span class="token operator">&gt;</span> <span class="token number">1023</span>
<span class="token number">3</span>: syscall <span class="token builtin class-name">read</span> -<span class="token operator">&gt;</span> <span class="token number">966</span>
<span class="token number">3</span>: syscall <span class="token builtin class-name">read</span> -<span class="token operator">&gt;</span> <span class="token number">70</span>
<span class="token number">3</span>: syscall <span class="token builtin class-name">read</span> -<span class="token operator">&gt;</span> <span class="token number">0</span>
$
$ trace <span class="token number">2147483647</span> <span class="token function">grep</span> hello README
<span class="token number">4</span>: syscall trace -<span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">4</span>: syscall <span class="token builtin class-name">exec</span> -<span class="token operator">&gt;</span> <span class="token number">3</span>
<span class="token number">4</span>: syscall <span class="token function">open</span> -<span class="token operator">&gt;</span> <span class="token number">3</span>
<span class="token number">4</span>: syscall <span class="token builtin class-name">read</span> -<span class="token operator">&gt;</span> <span class="token number">1023</span>
<span class="token number">4</span>: syscall <span class="token builtin class-name">read</span> -<span class="token operator">&gt;</span> <span class="token number">966</span>
<span class="token number">4</span>: syscall <span class="token builtin class-name">read</span> -<span class="token operator">&gt;</span> <span class="token number">70</span>
<span class="token number">4</span>: syscall <span class="token builtin class-name">read</span> -<span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">4</span>: syscall close -<span class="token operator">&gt;</span> <span class="token number">0</span>
$
$ <span class="token function">grep</span> hello README
$
$ trace <span class="token number">2</span> usertests forkforkfork
usertests starting
<span class="token builtin class-name">test</span> forkforkfork: <span class="token number">407</span>: syscall fork -<span class="token operator">&gt;</span> <span class="token number">408</span>
<span class="token number">408</span>: syscall fork -<span class="token operator">&gt;</span> <span class="token number">409</span>
<span class="token number">409</span>: syscall fork -<span class="token operator">&gt;</span> <span class="token number">410</span>
<span class="token number">410</span>: syscall fork -<span class="token operator">&gt;</span> <span class="token number">411</span>
<span class="token number">409</span>: syscall fork -<span class="token operator">&gt;</span> <span class="token number">412</span>
<span class="token number">410</span>: syscall fork -<span class="token operator">&gt;</span> <span class="token number">413</span>
<span class="token number">409</span>: syscall fork -<span class="token operator">&gt;</span> <span class="token number">414</span>
<span class="token number">411</span>: syscall fork -<span class="token operator">&gt;</span> <span class="token number">415</span>
<span class="token punctuation">..</span>.
$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在第一个示例中，<code>trace</code> 调用 <code>grep</code> 仅跟踪 <code>read</code> 系统调用。<code>32</code> 是 <code>1 &lt;&lt; SYS_read</code>。在第二个示例中，<code>trace</code> 运行 <code>grep</code> 时跟踪所有系统调用；<code>2147483647</code> 设置了所有 31 个低位。在第三个示例中，程序未被跟踪，因此没有打印跟踪输出。在第四个示例中，<code>usertests</code> 中 <code>forkforkfork</code> 测试的所有后代进程的 <code>fork</code> 系统调用正在被跟踪。如果你的程序的行为如上所示（尽管进程 ID 可能不同），则你的解决方案是正确的。</p><h3 id="一些提示" tabindex="-1"><a class="header-anchor" href="#一些提示"><span>一些提示：</span></a></h3><ol><li><strong>将 <code>$U/_trace</code> 添加到 <code>Makefile</code> 中的 <code>UPROGS</code></strong>。</li><li><strong>运行 <code>make qemu</code>，你会看到编译器无法编译 <code>user/trace.c</code>，因为用户空间的系统调用存根还不存在</strong>：向 <code>user/user.h</code> 添加系统调用的原型，向 <code>user/usys.pl</code> 添加存根，并向 <code>kernel/syscall.h</code> 添加系统调用号。<code>Makefile</code> 调用 <code>user/usys.pl</code> 脚本，该脚本生成 <code>user/usys.S</code>，即实际的系统调用存根，它们使用 RISC-V 的 <code>ecall</code> 指令过渡到内核。一旦你修复了编译问题，运行 <code>trace 32 grep hello README</code>；它将失败，因为你还没有在内核中实现系统调用。</li><li><strong>在 <code>kernel/sysproc.c</code> 中添加一个 <code>sys_trace()</code> 函数，通过在 <code>proc</code> 结构（参见 <code>kernel/proc.h</code>）中记住其参数来实现新的系统调用</strong>。用于从用户空间检索系统调用参数的函数在 <code>kernel/syscall.c</code> 中，你可以在 <code>kernel/sysproc.c</code> 中看到它们的使用示例。</li><li><strong>修改 <code>fork()</code>（参见 <code>kernel/proc.c</code>）以将跟踪掩码从父进程复制到子进程</strong>。</li><li><strong>修改 <code>kernel/syscall.c</code> 中的 <code>syscall()</code> 函数以打印跟踪输出</strong>。你需要添加一个系统调用名称数组来进行索引。</li></ol><h3 id="实验代码" tabindex="-1"><a class="header-anchor" href="#实验代码"><span>实验代码</span></a></h3><h4 id="usys-pl-user" tabindex="-1"><a class="header-anchor" href="#usys-pl-user"><span>usys.pl/user</span></a></h4><div class="language-pl line-numbers-mode" data-ext="pl" data-title="pl"><pre class="language-pl"><code>entry(&quot;uptime&quot;);
// ======add code begin========
entry(&quot;trace&quot;);
//===========end===============
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="user-h-user" tabindex="-1"><a class="header-anchor" href="#user-h-user"><span>user.h/user</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">uptime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ======add code begin========</span>
<span class="token keyword">int</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//===========end===============</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="syscall-h-kernel" tabindex="-1"><a class="header-anchor" href="#syscall-h-kernel"><span>syscall.h/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_mkdir</span>  <span class="token expression"><span class="token number">20</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_close</span>  <span class="token expression"><span class="token number">21</span></span></span>
<span class="token comment">// ======add code begin========</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_trace</span>  <span class="token expression"><span class="token number">22</span></span></span>
<span class="token comment">//===========end===============</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="proc-h-kernel" tabindex="-1"><a class="header-anchor" href="#proc-h-kernel"><span>proc.h/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> xstate<span class="token punctuation">;</span>                  <span class="token comment">// Exit status to be returned to parent&#39;s wait</span>
  <span class="token keyword">int</span> pid<span class="token punctuation">;</span>                     <span class="token comment">// Process ID</span>
  <span class="token comment">// ======add code begin========</span>
  <span class="token keyword">int</span> trace_code<span class="token punctuation">;</span>              <span class="token comment">// The Trace System Call Number</span>
  <span class="token comment">//===========end===============</span>
  <span class="token comment">// wait_lock must be held when using this:</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>         <span class="token comment">// Parent process</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sysproc-c-kernel" tabindex="-1"><a class="header-anchor" href="#sysproc-c-kernel"><span>sysproc.c/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>uint64
<span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  <span class="token keyword">int</span> trace_code<span class="token punctuation">;</span>
  <span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>trace_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p<span class="token operator">-&gt;</span>trace_code <span class="token operator">=</span> trace_code<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="proc-c-kernel" tabindex="-1"><a class="header-anchor" href="#proc-c-kernel"><span>proc.c/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span>
<span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> pid<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>np<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Allocate process.</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np <span class="token operator">=</span> <span class="token function">allocproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Copy user memory from parent to child.</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">uvmcopy</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> np<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>sz<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">freeproc</span><span class="token punctuation">(</span>np<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>np<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  np<span class="token operator">-&gt;</span>sz <span class="token operator">=</span> p<span class="token operator">-&gt;</span>sz<span class="token punctuation">;</span>
  <span class="token comment">// copy saved user registers.</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>np<span class="token operator">-&gt;</span>trapframe<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>trapframe<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ======add code begin========</span>
  <span class="token comment">// copy trace code</span>
  np<span class="token operator">-&gt;</span>trace_code <span class="token operator">=</span> p<span class="token operator">-&gt;</span>trace_code<span class="token punctuation">;</span>
  <span class="token comment">//===========end===============</span>
  <span class="token comment">// Cause fork to return 0 in the child.</span>
  np<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="syscall-c-kernel" tabindex="-1"><a class="header-anchor" href="#syscall-c-kernel"><span>syscall.c/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;syscall.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;defs.h&quot;</span></span>
<span class="token comment">// ======add code begin========</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> syscall_names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;fork&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;wait&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;pipe&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;kill&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;exec&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;fstat&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;chdir&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;dup&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;getpid&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;sbrk&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;sleep&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;uptime&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;write&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mknod&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;unlink&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mkdir&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;trace&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//===========end===============</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">extern</span> uint64 <span class="token function">sys_link</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> uint64 <span class="token function">sys_mkdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> uint64 <span class="token function">sys_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ======add code begin========</span>
<span class="token keyword">extern</span> uint64 <span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//===========end===============</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">[</span>SYS_link<span class="token punctuation">]</span>    sys_link<span class="token punctuation">,</span>
<span class="token punctuation">[</span>SYS_mkdir<span class="token punctuation">]</span>   sys_mkdir<span class="token punctuation">,</span>
<span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   sys_close<span class="token punctuation">,</span>
<span class="token comment">// ======add code begin========</span>
<span class="token punctuation">[</span>SYS_trace<span class="token punctuation">]</span>   sys_trace<span class="token punctuation">,</span>
<span class="token comment">//===========end===============</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span>
<span class="token function">syscall</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> num<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  num <span class="token operator">=</span> p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a7<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Use num to lookup the system call function for num, call it,</span>
    <span class="token comment">// and store its return value in p-&gt;trapframe-&gt;a0</span>
    p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a0 <span class="token operator">=</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ======add code begin========</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>trace_code <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d: syscall %s -&gt; %d\\n&quot;</span><span class="token punctuation">,</span>
            p<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span> syscall_names<span class="token punctuation">[</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//===========end===============</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s: unknown sys call %d\\n&quot;</span><span class="token punctuation">,</span>
            p<span class="token operator">-&gt;</span>pid<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>trapframe<span class="token operator">-&gt;</span>a0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),v={id:"sysinfo-moderate",tabindex:"-1"},b={class:"header-anchor",href:"#sysinfo-moderate"},y={href:"https://pdos.csail.mit.edu/6.S081/2020/labs/guidance.html",target:"_blank",rel:"noopener noreferrer"},h=a(`<div class="hint-container important"><p class="hint-container-title">重要</p><p>在这个任务中，你将添加一个系统调用 <code>sysinfo</code>，用于收集有关运行系统的信息。该系统调用接受一个参数：指向 <code>struct sysinfo</code> 的指针（参见 <code>kernel/sysinfo.h</code>）。内核应填充该结构的字段：<code>freemem</code> 字段应设置为可用内存的字节数，<code>nproc</code> 字段应设置为状态不是 <code>UNUSED</code> 的进程数。我们提供了一个测试程序 <code>sysinfotest</code>；如果你通过了这个任务，它将打印 &quot;sysinfotest: OK&quot;。</p></div><ol><li><strong>将 <code>$U/_sysinfotest</code> 添加到 <code>Makefile</code> 中的 <code>UPROGS</code></strong>。</li><li><strong>运行 <code>make qemu</code>；<code>user/sysinfotest.c</code> 将无法编译</strong>。添加系统调用 <code>sysinfo</code>，遵循与上一个任务相同的步骤。要在 <code>user/user.h</code> 中声明 <code>sysinfo()</code> 的原型，你需要预先声明 <code>struct sysinfo</code> 的存在：</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sysinfo</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sysinfo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sysinfo</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>一旦你修复了编译问题，运行 \`sysinfotest\`；它将失败，因为你还没有在内核中实现系统调用。
</code></pre><ol start="3"><li><strong><code>sysinfo</code> 需要将 <code>struct sysinfo</code> 复制回用户空间</strong>；参见 <code>sys_fstat()</code>（<code>kernel/sysfile.c</code>）和 <code>filestat()</code>（<code>kernel/file.c</code>）以了解如何使用 <code>copyout()</code> 完成此操作的示例。</li><li><strong>要收集可用内存量，请在 <code>kernel/kalloc.c</code> 中添加一个函数</strong>。</li><li><strong>要收集进程数，请在 <code>kernel/proc.c</code> 中添加一个函数</strong>。</li></ol><h3 id="实验代码-1" tabindex="-1"><a class="header-anchor" href="#实验代码-1"><span>实验代码</span></a></h3><h4 id="usys-pl-user-1" tabindex="-1"><a class="header-anchor" href="#usys-pl-user-1"><span>usys.pl/user</span></a></h4><div class="language-pl line-numbers-mode" data-ext="pl" data-title="pl"><pre class="language-pl"><code>
......

entry(&quot;uptime&quot;);
entry(&quot;trace&quot;);
// ======add code begin========
entry(&quot;sysinfo&quot;);
//===========end===============
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="user-n-user" tabindex="-1"><a class="header-anchor" href="#user-n-user"><span>user.n/user</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">sbrk</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">uptime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ======add code begin========</span>
<span class="token keyword">int</span> <span class="token function">sysinfo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sysinfo</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//===========end===============</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="syscall-h-kernel-1" tabindex="-1"><a class="header-anchor" href="#syscall-h-kernel-1"><span>syscall.h/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_close</span>  <span class="token expression"><span class="token number">21</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_trace</span>  <span class="token expression"><span class="token number">22</span></span></span>
<span class="token comment">// ======add code begin========</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_sysinfo</span> <span class="token expression"><span class="token number">23</span></span></span>
<span class="token comment">//===========end===============</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="defs-h-kernel" tabindex="-1"><a class="header-anchor" href="#defs-h-kernel"><span>defs.h/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">// kalloc.c</span>
<span class="token keyword">void</span><span class="token operator">*</span>           <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">kinit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ======add code begin========</span>
<span class="token keyword">int</span>             <span class="token function">countMem</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//===========end===============</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">int</span>             <span class="token function">either_copyout</span><span class="token punctuation">(</span><span class="token keyword">int</span> user_dst<span class="token punctuation">,</span> uint64 dst<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> uint64 len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span>             <span class="token function">either_copyin</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token keyword">int</span> user_src<span class="token punctuation">,</span> uint64 src<span class="token punctuation">,</span> uint64 len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>            <span class="token function">procdump</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ======add code begin========</span>
<span class="token keyword">int</span>             <span class="token function">countProcess</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//===========end===============</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="syscall-c" tabindex="-1"><a class="header-anchor" href="#syscall-c"><span>syscall.c</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">extern</span> uint64 <span class="token function">sys_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> uint64 <span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ======add code begin========</span>
<span class="token keyword">extern</span> uint64 <span class="token function">sys_sysinfo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//===========end===============</span>
  
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   sys_close<span class="token punctuation">,</span>
<span class="token punctuation">[</span>SYS_trace<span class="token punctuation">]</span>   sys_trace<span class="token punctuation">,</span>
<span class="token comment">// ======add code begin========</span>
<span class="token punctuation">[</span>SYS_sysinfo<span class="token punctuation">]</span> sys_sysinfo<span class="token punctuation">,</span>
<span class="token comment">//===========end===============</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kalloc-c-kernel" tabindex="-1"><a class="header-anchor" href="#kalloc-c-kernel"><span>kalloc.c/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">countMem</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">run</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>
  <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmem<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  r <span class="token operator">=</span> kmem<span class="token punctuation">.</span>freelist<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    size <span class="token operator">+=</span> PGSIZE<span class="token punctuation">;</span>
    r <span class="token operator">=</span> r<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmem<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="proc-c-kernel-1" tabindex="-1"><a class="header-anchor" href="#proc-c-kernel-1"><span>proc.c/kernel</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">countProcess</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>state <span class="token operator">!=</span> UNUSED<span class="token punctuation">)</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sysproc-c" tabindex="-1"><a class="header-anchor" href="#sysproc-c"><span>sysproc.c</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;proc.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sysinfo.h&quot;</span></span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

uint64
<span class="token function">sys_sysinfo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sysinfo</span> si<span class="token punctuation">;</span>
  uint64 info<span class="token punctuation">;</span>
  <span class="token function">argaddr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
  si<span class="token punctuation">.</span>freemem <span class="token operator">=</span> <span class="token function">countMem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  si<span class="token punctuation">.</span>nproc <span class="token operator">=</span> <span class="token function">countProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">copyout</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pagetable<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>si<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function g(f,w){const e=o("ExternalLinkIcon");return c(),l("div",null,[u,n("h2",r,[n("a",d,[n("span",null,[s("System call tracing ("),n("a",k,[s("moderate"),t(e)]),s(")")])])]),m,n("h2",v,[n("a",b,[n("span",null,[s("Sysinfo ("),n("a",y,[s("moderate"),t(e)]),s(")")])])]),h])}const q=p(i,[["render",g],["__file","2-lab-system-calls.html.vue"]]),S=JSON.parse(`{"path":"/cs-basics/os/6.S081/labs/2-lab-system-calls.html","title":"Lab 2: System Calls","lang":"zh-CN","frontmatter":{"icon":"code-bold","date":"2024-11-12T00:00:00.000Z","category":["操作系统"],"tags":["MIT","C","riscv","XV6"],"description":"Lab 2: System Calls 在上一个实验中，你使用系统调用编写了一些实用程序。在这个实验中，你将向 xv6 添加一些新的系统调用，这将帮助你理解它们的工作原理，并让你接触到 xv6 内核的一些内部机制。在后续的实验中，你将添加更多的系统调用。 注意 开始编码之前，请阅读 xv6 书籍的第 2 章，以及第 4 章的第 4.3 节和第 4.4 ...","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/labs/2-lab-system-calls.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"Lab 2: System Calls"}],["meta",{"property":"og:description","content":"Lab 2: System Calls 在上一个实验中，你使用系统调用编写了一些实用程序。在这个实验中，你将向 xv6 添加一些新的系统调用，这将帮助你理解它们的工作原理，并让你接触到 xv6 内核的一些内部机制。在后续的实验中，你将添加更多的系统调用。 注意 开始编码之前，请阅读 xv6 书籍的第 2 章，以及第 4 章的第 4.3 节和第 4.4 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-14T08:30:04.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:published_time","content":"2024-11-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-14T08:30:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lab 2: System Calls\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-14T08:30:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"System call tracing (moderate)","slug":"system-call-tracing-moderate","link":"#system-call-tracing-moderate","children":[{"level":3,"title":"一些提示：","slug":"一些提示","link":"#一些提示","children":[]},{"level":3,"title":"实验代码","slug":"实验代码","link":"#实验代码","children":[]}]},{"level":2,"title":"Sysinfo (moderate)","slug":"sysinfo-moderate","link":"#sysinfo-moderate","children":[{"level":3,"title":"实验代码","slug":"实验代码-1","link":"#实验代码-1","children":[]}]}],"git":{"createdTime":1731466572000,"updatedTime":1731573004000,"contributors":[{"name":"jh_personal@163.com","email":"jh_personal@163.com","commits":3}]},"readingTime":{"minutes":6.62,"words":1986},"filePathRelative":"cs-basics/os/6.S081/labs/2-lab-system-calls.md","localizedDate":"2024年11月12日","excerpt":"\\n<p>在上一个实验中，你使用系统调用编写了一些实用程序。在这个实验中，你将向 xv6 添加一些新的系统调用，这将帮助你理解它们的工作原理，并让你接触到 xv6 内核的一些内部机制。在后续的实验中，你将添加更多的系统调用。</p>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>开始编码之前，请阅读 xv6 书籍的第 2 章，以及第 4 章的第 4.3 节和第 4.4 节，并阅读相关的源文件：</p>\\n<ul>\\n<li>用户空间的系统调用代码 在 user/user.h 和 user/usys.pl 中。</li>\\n<li>内核空间的系统调用代码 在 kernel/syscall.h 和 kernel/syscall.c 中。</li>\\n<li>与进程相关的代码 在 kernel/proc.h 和 kernel/proc.c 中。</li>\\n</ul>\\n</div>","autoDesc":true}`);export{q as comp,S as data};
