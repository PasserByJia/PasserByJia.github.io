import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-Dvlh-CS2.js";const t={},p=e(`<h1 id="xv6源码精读-vm-c" tabindex="-1"><a class="header-anchor" href="#xv6源码精读-vm-c"><span>XV6源码精读 -- vm.c</span></a></h1><h2 id="uvmcreate" tabindex="-1"><a class="header-anchor" href="#uvmcreate"><span>uvmcreate()</span></a></h2><p>在操作系统中，每个进程都有自己的页表，用于管理其虚拟地址空间。当操作系统创建新的进程时，需要为该进程分配一个新的页表。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 创建一个空的用户页表</span>
<span class="token comment">// 如果没有内存了就返回0</span>
<span class="token class-name">pagetable_t</span>
<span class="token function">uvmcreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pagetable_t</span> pagetable<span class="token punctuation">;</span>
  pagetable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">pagetable_t</span><span class="token punctuation">)</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pagetable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//将此页表都填充成0</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>pagetable<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> pagetable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>memset</code> 函数将分配的物理页的内容初始化为0。这样做是为了确保新分配的页表中的所有条目都是无效的，即没有任何虚拟地址被映射到物理地址。</p>`,5),c=[p];function o(l,i){return a(),s("div",null,c)}const m=n(t,[["render",o],["__file","code-vm.html.vue"]]),d=JSON.parse(`{"path":"/cs-basics/os/6.S081/xv6/code-vm.html","title":"XV6源码精读 -- vm.c","lang":"zh-CN","frontmatter":{"icon":"ph:file-code","date":"2024-05-10T00:00:00.000Z","category":["操作系统"],"tag":["MIT","XV6","riscv","C"],"description":"XV6源码精读 -- vm.c uvmcreate() 在操作系统中，每个进程都有自己的页表，用于管理其虚拟地址空间。当操作系统创建新的进程时，需要为该进程分配一个新的页表。 使用 memset 函数将分配的物理页的内容初始化为0。这样做是为了确保新分配的页表中的所有条目都是无效的，即没有任何虚拟地址被映射到物理地址。","head":[["meta",{"property":"og:url","content":"https://passerbyjia.github.io/cs-basics/os/6.S081/xv6/code-vm.html"}],["meta",{"property":"og:site_name","content":"Plus's NoteBook"}],["meta",{"property":"og:title","content":"XV6源码精读 -- vm.c"}],["meta",{"property":"og:description","content":"XV6源码精读 -- vm.c uvmcreate() 在操作系统中，每个进程都有自己的页表，用于管理其虚拟地址空间。当操作系统创建新的进程时，需要为该进程分配一个新的页表。 使用 memset 函数将分配的物理页的内容初始化为0。这样做是为了确保新分配的页表中的所有条目都是无效的，即没有任何虚拟地址被映射到物理地址。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-10T01:40:14.000Z"}],["meta",{"property":"article:author","content":"Plus"}],["meta",{"property":"article:tag","content":"MIT"}],["meta",{"property":"article:tag","content":"XV6"}],["meta",{"property":"article:tag","content":"riscv"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:published_time","content":"2024-05-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-10T01:40:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"XV6源码精读 -- vm.c\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-10T01:40:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Plus\\",\\"url\\":\\"https://passerbyjia.github.io\\"}]}"]]},"headers":[{"level":2,"title":"uvmcreate()","slug":"uvmcreate","link":"#uvmcreate","children":[]}],"git":{"createdTime":1715305214000,"updatedTime":1715305214000,"contributors":[{"name":"JH","email":"jh_personal@163.com","commits":1}]},"readingTime":{"minutes":0.64,"words":193},"filePathRelative":"cs-basics/os/6.S081/xv6/code-vm.md","localizedDate":"2024年5月10日","excerpt":"\\n<h2>uvmcreate()</h2>\\n<p>在操作系统中，每个进程都有自己的页表，用于管理其虚拟地址空间。当操作系统创建新的进程时，需要为该进程分配一个新的页表。</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">// 创建一个空的用户页表</span>\\n<span class=\\"token comment\\">// 如果没有内存了就返回0</span>\\n<span class=\\"token class-name\\">pagetable_t</span>\\n<span class=\\"token function\\">uvmcreate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">pagetable_t</span> pagetable<span class=\\"token punctuation\\">;</span>\\n  pagetable <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pagetable_t</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">kalloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>pagetable <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//将此页表都填充成0</span>\\n  <span class=\\"token function\\">memset</span><span class=\\"token punctuation\\">(</span>pagetable<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> PGSIZE<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> pagetable<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{m as comp,d as data};
